/*! For license information please see main.js.LICENSE.txt */
!function(){"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,n(o.key),o)}}function n(e){var n=function(e,n){if("object"!=t(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!=t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==t(n)?n:n+""}var r=function(){return t=function t(e,n,r){var o=e.data,i=e.handleCardClick,c=e.handleAddLike,u=e.handleRemoveLike,a=e.handleDeleteClick;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._link=o.link,this._name=o.name,this._id=o._id,this._owner=o.owner,this._cardSelector=n,this._handleCardClick=i,this._likesArray=o.likes||{},this._user=r,this._handleAddLike=c,this._handleDeleteClick=a,this._handleRemoveLike=u},(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".cards__element").cloneNode("true")}},{key:"_isLiked",value:function(){var t=this;return this._likesArray.some((function(e){return e._id===t._user._id}))}},{key:"_isUserOwner",value:function(){return this._user._id===this._owner._id}},{key:"_updateLikeStatus",value:function(){var t=this._element.querySelector(".cards__element_itemImage"),e=this._element.querySelector(".countlike");this._isLiked()?t.classList.add("cards__like_active"):t.classList.remove("cards__like_active"),e.textContent=this._likesArray.length}},{key:"_handleLikeAndDislike",value:function(){var t=this;this._element.querySelector(".cards__element_itemImage").addEventListener("click",(function(e){var n=e.target,r=t._element.querySelector(".countlike");t._isLiked()?t._handleRemoveLike(t._id).then((function(e){t._likesArray=e.likes,n.classList.remove("cards__like_active"),r.textContent=t._likesArray.length})):t._handleAddLike(t._id).then((function(e){t._likesArray=e.likes,n.classList.add("cards__like_active"),r.textContent=t._likesArray.length}))}))}},{key:"_handleRemove",value:function(){var t=this;this._element.querySelector(".cards__element_trast").addEventListener("click",(function(){t._handleDeleteClick(t._id,(function(){t._element.remove()}))}))}},{key:"_showCard",value:function(){var t=this;this._element.querySelector(".cards__element_image").addEventListener("click",(function(){t._handleCardClick({link:t._link,name:t._name})}))}},{key:"_setEventListeners",value:function(){var t=this;this._handleLikeAndDislike(),this._handleRemove(),this._showCard(),this._imagenElement.addEventListener("click",(function(){t._handleCardClick({link:t._link,name:t._name})}))}},{key:"createNewCard",value:function(){return this._element=this._getTemplate(),this._element.querySelector(".cards__element_itemTitle").textContent=this._name,this._imagenElement=this._element.querySelector(".cards__element_image"),this._imagenElement.src=this._link,this._imagenElement.alt=this._name,this._isUserOwner()||(this._element.querySelector(".cards__element_trast").style.display="none"),this._updateLikeStatus(),this._setEventListeners(),this._element}}])&&e(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n}();function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,c(r.key),r)}}function c(t){var e=function(t,e){if("object"!=o(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==o(e)?e:e+""}var u=function(){return t=function t(e){var n,r,o,i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=function(t){"Escape"===t.key&&i.close()},(r=c(r="_handleEscClose"))in n?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,this._popupSelector=e,this._popupElement=document.querySelector(this._popupSelector),this._handleEscClose=this._handleEscClose.bind(this)},(e=[{key:"open",value:function(){this._popupElement.classList.add("popup_show"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_show"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var t=this,e=this._popupElement.querySelector(".popup__close-button"),n=this._popupElement.querySelectorAll(".popup__overlay");e.addEventListener("click",(function(){t.close()})),n.forEach((function(e){e.addEventListener("click",(function(){t.close()}))})),document.addEventListener("keydown",this._handleEscClose)}}])&&i(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,s(r.key),r)}}function s(t){var e=function(t,e){if("object"!=a(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==a(e)?e:e+""}function f(t,e,n){return e=h(e),function(t,e){if(e&&("object"===a(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,p()?Reflect.construct(e,n||[],h(t).constructor):e.apply(t,n))}function p(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(p=function(){return!!t})()}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},y.apply(this,arguments)}function h(t){return h=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},h(t)}function d(t,e){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},d(t,e)}var m=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=f(this,e,[t]))._submitButton=n,r._form=document.querySelector(t).querySelector(".form"),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&d(t,e)}(e,t),n=e,(r=[{key:"_getInputValues",value:function(){var t={};return this._form.querySelectorAll(".form__input").forEach((function(e){e.name&&(t[e.name]=e.value)})),t}},{key:"close",value:function(){this._form.reset(),y(h(e.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var t=this;y(h(e.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault();var n=t._getInputValues();t._submitButton(n),t.close()}));var n=this._form.querySelector(this._closeButonSelector);n&&n.addEventListener("click",(function(e){e.preventDefault(),t.close()}))}}])&&l(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(u);function v(t){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},v(t)}function b(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,_(r.key),r)}}function _(t){var e=function(t,e){if("object"!=v(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=v(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==v(e)?e:e+""}function g(t,e,n){return e=S(e),function(t,e){if(e&&("object"===v(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,w()?Reflect.construct(e,n||[],S(t).constructor):e.apply(t,n))}function w(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(w=function(){return!!t})()}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=S(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},k.apply(this,arguments)}function S(t){return S=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},S(t)}function E(t,e){return E=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},E(t,e)}var j=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),g(this,e,[t])}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&E(t,e)}(e,t),n=e,(r=[{key:"open",value:function(t,n){var r=document.querySelector(this._popupSelector);this._image=r.querySelector("#popup__image"),this._description=r.querySelector(".popup__title"),this._image&&this._description?(this._image.src=t,this._image.alt=n,this._description.textContent=n,k(S(e.prototype),"open",this).call(this)):alert("Elemento de imagen o descripcion no encontradas")}}])&&b(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(u);function O(t){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},O(t)}function L(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,P(r.key),r)}}function P(t){var e=function(t,e){if("object"!=O(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=O(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==O(e)?e:e+""}var C=function(){return t=function t(e,n){var r=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=r,this._renderer=o,this._container=document.querySelector(n)},(e=[{key:"clear",value:function(){this._container.innerHTML=""}},{key:"addItem",value:function(t){this._container.append(t)}},{key:"renderer",value:function(){var t=this;this.clear(),this._items.forEach((function(e){var n=t._renderer(e);t.addItem(n)}))}}])&&L(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function q(t){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},q(t)}function x(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,T(r.key),r)}}function T(t){var e=function(t,e){if("object"!=q(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=q(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==q(e)?e:e+""}var A=function(){return t=function t(e){var n=e.nameSelector,r=e.jobSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nameElement=document.querySelector(n),this._jobElement=document.querySelector(r)},(e=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}},{key:"setUserInfo",value:function(t){var e=t.name,n=t.job;this._nameElement.textContent=e,this._jobElement.textContent=n}}])&&x(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function R(t){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},R(t)}function D(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,I(r.key),r)}}function I(t){var e=function(t,e){if("object"!=R(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=R(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==R(e)?e:e+""}function N(t,e,n){return e=B(e),function(t,e){if(e&&("object"===R(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,G()?Reflect.construct(e,n||[],B(t).constructor):e.apply(t,n))}function G(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(G=function(){return!!t})()}function U(){return U="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=B(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},U.apply(this,arguments)}function B(t){return B=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},B(t)}function z(t,e){return z=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},z(t,e)}var F=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=N(this,e,[t])).submitCallback=n,r._form=document.querySelector(t).querySelector(".form"),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&z(t,e)}(e,t),n=e,(r=[{key:"open",value:function(t){U(B(e.prototype),"open",this).call(this),this.submitCallback=t}},{key:"_getInputValues",value:function(){var t={};return this._form.querySelectorAll(".form__input").forEach((function(e){e.name&&(t[e.name]=e.value)})),t}},{key:"close",value:function(){this._form.reset(),U(B(e.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var t=this;U(B(e.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),t.submitCallback()})),this._form.querySelector(".form__submit_cancel").addEventListener("click",(function(){t.close()}))}}])&&D(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(u);function H(t){return H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},H(t)}function J(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,V(r.key),r)}}function V(t){var e=function(t,e){if("object"!=H(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=H(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==H(e)?e:e+""}var M=new(function(){return t=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=e,this._token=n},(e=[{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:{Authorization:this._token}}).then((function(t){return t.json()})).catch((function(t){console.log("Error:",t)}))}},{key:"getInitialCard",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:{Authorization:this._token}}).then((function(t){return t.json()})).catch((function(t){console.log("Error:",t)}))}},{key:"updateUser",value:function(t,e){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:{Authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:e})}).then((function(t){return t.json()})).catch((function(t){console.log("Error: ",t)}))}},{key:"updateUserPhoto",value:function(t){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:{Authorization:this._token},body:JSON.stringify({avatar:t})}).this((function(t){return t.json()})).catch((function(t){console.log("Error:",t)}))}},{key:"addCard",value:function(t,e){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:{Authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({link:e,name:t})}).then((function(t){return t.json()})).catch((function(t){console.log("Error: ",t)}))}},{key:"linkCard",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"PUT",headers:{Authorization:this._token}}).then((function(t){return t.json()})).catch((function(t){console.log("Error: ",t)}))}},{key:"deleteCard",value:function(t){return fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:{Authorization:this._token}}).then((function(t){return t.json()})).catch((function(t){console.log("Error: ",t)}))}},{key:"deleteCardLink",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"DELETE",headers:{Authorization:this._token}}).then((function(t){return t.json()})).catch((function(t){console.log("Error: ",t)}))}}])&&J(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}())("https://around.nomoreparties.co/v1/web_es_11","678fbd92-e6e4-4044-b047-74ce334ffd4e"),Y=document.querySelectorAll(".form"),K=(document.querySelector(".popup"),document.querySelector(".buttons__item_index_profile")),Q=document.querySelector(".buttons__item_index_add-card"),W=(document.querySelectorAll(".popup__overlay"),document.querySelectorAll(".form__error"),document.querySelector(".popup__close-button"),document.querySelector(".cards__element_item-imagen"),document.querySelectorAll(".cards__element_trast")),X=document.querySelector(".buttons__edit"),Z=document.querySelector(".form__submit_newPhoto");function $(t){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},$(t)}function tt(){tt=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function l(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,n){return t[e]=n}}function s(t,e,n,r){var i=e&&e.prototype instanceof v?e:v,c=Object.create(i.prototype),u=new q(r||[]);return o(c,"_invoke",{value:O(t,n,u)}),c}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=s;var p="suspendedStart",y="suspendedYield",h="executing",d="completed",m={};function v(){}function b(){}function _(){}var g={};l(g,c,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(x([])));k&&k!==n&&r.call(k,c)&&(g=k);var S=_.prototype=v.prototype=Object.create(g);function E(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function j(t,e){function n(o,i,c,u){var a=f(t[o],t,i);if("throw"!==a.type){var l=a.arg,s=l.value;return s&&"object"==$(s)&&r.call(s,"__await")?e.resolve(s.__await).then((function(t){n("next",t,c,u)}),(function(t){n("throw",t,c,u)})):e.resolve(s).then((function(t){l.value=t,c(l)}),(function(t){return n("throw",t,c,u)}))}u(a.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function O(e,n,r){var o=p;return function(i,c){if(o===h)throw Error("Generator is already running");if(o===d){if("throw"===i)throw c;return{value:t,done:!0}}for(r.method=i,r.arg=c;;){var u=r.delegate;if(u){var a=L(u,r);if(a){if(a===m)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var l=f(e,n,r);if("normal"===l.type){if(o=r.done?d:y,l.arg===m)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(o=d,r.method="throw",r.arg=l.arg)}}}function L(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var c=i.arg;return c?c.done?(n[e.resultName]=c.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):c:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function q(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function x(e){if(e||""===e){var n=e[c];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError($(e)+" is not iterable")}return b.prototype=_,o(S,"constructor",{value:_,configurable:!0}),o(_,"constructor",{value:b,configurable:!0}),b.displayName=l(_,a,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,_):(t.__proto__=_,l(t,a,"GeneratorFunction")),t.prototype=Object.create(S),t},e.awrap=function(t){return{__await:t}},E(j.prototype),l(j.prototype,u,(function(){return this})),e.AsyncIterator=j,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var c=new j(s(t,n,r,o),i);return e.isGeneratorFunction(n)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},E(S),l(S,a,"Generator"),l(S,c,(function(){return this})),l(S,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=x,q.prototype={constructor:q,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return u.type="throw",u.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],u=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var a=r.call(c,"catchLoc"),l=r.call(c,"finallyLoc");if(a&&l){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(a){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!l)throw Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:x(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function et(t,e,n,r,o,i,c){try{var u=t[i](c),a=u.value}catch(t){return void n(t)}u.done?e(a):Promise.resolve(a).then(r,o)}function nt(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function c(t){et(i,r,o,c,u,"next",t)}function u(t){et(i,r,o,c,u,"throw",t)}c(void 0)}))}}document.querySelector(".cards"),document.addEventListener("DOMContentLoaded",nt(tt().mark((function t(){var e,n,o,i,c,u,a,l,s;return tt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,M.getUserInfo();case 2:e=t.sent,(n=new j(".popup_content-image")).setEventListeners(),o=function(t){n.open(t.link,t.name)},i=function(t){return new r({data:t,handleCardClick:o,handleDeleteClick:function(t,e){s.open((function(){M.deleteCard(t).then((function(){e(),s.close()})).catch((function(t){console.error(t)}))}))},handleAddLike:function(t){return M.linkCard(t)},handleRemoveLike:function(t){return M.deleteCardLink(t)}},"#newElement",e).createNewCard()},M.getInitialCard().then((function(t){new C({items:t,renderer:function(t){return i(t)}},".cards").renderer()})).catch((function(t){console.log(t)})),c=new A({nameSelector:".buttons__name",jobSelector:".buttons__explorer"}),(u=new m(".popup_edit-profile",(function(t){c.setUserInfo({name:t.name,job:t.activity}),u.close(),Y.forEach((function(t){t.reset(),t.querySelector(".form__submit").classList.add("button_inactive")}))}))).setEventListeners(),K.addEventListener("click",(function(){u.open()})),(a=new m(".popup_content-addcard",(function(t){M.addCard(t.newplace,t.enlace).then((function(t){var e=i(t);document.querySelector(".cards").prepend(e),a.close()}))}))).setEventListeners(),Q.addEventListener("click",(function(){a.open()})),(l=new m(".popup_avatar",(function(){}))).setEventListeners(),X.addEventListener("click",(function(){l.open()})),Z.addEventListener("click",(function(){})),(s=new F(".popup_delete-card")).setEventListeners(),W.forEach((function(t){t.addEventListener("click",(function(){s.open()}))}));case 22:case"end":return t.stop()}}),t)}))))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBSyxTQUFBZ0UsR0FDakQsSUFBTThLLEVBQVV4QixFQUFZdEosR0FDNUJyRixTQUFTQyxjQUFjLFVBQVVtUSxRQUFRRCxHQUN6Q3JCLEVBQXdCck0sT0FFNUIsR0FDSixLQUN3QjBNLG9CQUd4QjNILEVBQWN2RyxpQkFBaUIsU0FBUyxXQUNwQzZOLEVBQXdCTSxNQUM1QixLQUVNTCxFQUFzQixJQUFJM0wsRUR0SVosaUJDc0kyQyxXQUFRLEtBQ25EK0wsb0JBQ3BCekgsRUFBaUJ6RyxpQkFBaUIsU0FBUyxXQUN2QzhOLEVBQW9CSyxNQUN4QixJQUNBekgsRUFBbUIxRyxpQkFBaUIsU0FBUyxXQUU3QyxLQUVNK04sRUFBK0IsSUFBSXFCLEVEaEpiLHVCQ2lKQ2xCLG9CQUM3QjFILEVBQWN2RSxTQUFRLFNBQUNVLEdBQ25CQSxFQUFLM0MsaUJBQWlCLFNBQVMsV0FDM0IrTixFQUE2QkksTUFDakMsR0FDSixJQUtBLHlCQUFBSCxFQUFBN0IsT0FBQSxHQUFBb0IsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF9hcm91bmQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF9hcm91bmQvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF9hcm91bmQvLi9zcmMvY29tcG9uZW50cy9BcGlzLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy91dGlscy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDYXJkIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZGF0YSwgaGFuZGxlQ2FyZENsaWNrLCBoYW5kbGVBZGRMaWtlLCBoYW5kbGVSZW1vdmVMaWtlLCBoYW5kbGVEZWxldGVDbGljayB9LCBjYXJkU2VsZWN0b3IsIHVzZXIpIHtcclxuICAgICAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcclxuICAgICAgICB0aGlzLl9vd25lciA9IGRhdGEub3duZXI7XHJcbiAgICAgICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcclxuICAgICAgICB0aGlzLl9saWtlc0FycmF5ID0gZGF0YS5saWtlcyB8fCB7fTtcclxuICAgICAgICB0aGlzLl91c2VyID0gdXNlcjtcclxuICAgICAgICB0aGlzLl9oYW5kbGVBZGRMaWtlID0gaGFuZGxlQWRkTGlrZTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayA9IGhhbmRsZURlbGV0ZUNsaWNrO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZVJlbW92ZUxpa2UgPSBoYW5kbGVSZW1vdmVMaWtlO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgICAgICBjb25zdCBuZXdFbGVtbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcikuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19lbGVtZW50XCIpXHJcbiAgICAgICAgICAgIC5jbG9uZU5vZGUoXCJ0cnVlXCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3RWxlbW50O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBfaXNMaWtlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGlrZXNBcnJheS5zb21lKGxpa2UgPT4gbGlrZS5faWQgPT09IHRoaXMuX3VzZXIuX2lkKTtcclxuICAgIH1cclxuXHJcbiAgICBfaXNVc2VyT3duZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXIuX2lkID09PSB0aGlzLl9vd25lci5faWQ7XHJcbiAgICB9XHJcblxyXG4gICAgX3VwZGF0ZUxpa2VTdGF0dXMoKSB7XHJcbiAgICAgICAgY29uc3QgbGlrZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudF9pdGVtSW1hZ2VcIik7XHJcbiAgICAgICAgY29uc3QgbGlrZUNvdW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvdW50bGlrZVwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzTGlrZWQoKSkge1xyXG4gICAgICAgICAgICBsaWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkc19fbGlrZV9hY3RpdmVcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZHNfX2xpa2VfYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGlrZUNvdW50LnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXNBcnJheS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBfaGFuZGxlTGlrZUFuZERpc2xpa2UoKSB7XHJcbiAgICAgICAgLy9BIGxhIHRhcmpldGEgY3JlYWRhIHNlIGxlIGRhIGVsIEV2ZW50byBDbGljayBxdWUgYWN0aXZhIG8gZGVzYWN0aXZhIGVsIGJvdG9uIGRlIG1lIGd1c3RhIHNpIGVsIHVzdWFyaW8gbG8gc2VsZWNjaW9uYVxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudF9pdGVtSW1hZ2VcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsaWtlQnV0dG9uID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudExpa2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY291bnRsaWtlXCIpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzTGlrZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQWRkTGlrZSh0aGlzLl9pZCkudGhlbihjYXJkVXBkYXRlZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlrZXNBcnJheSA9IGNhcmRVcGRhdGVkLmxpa2VzO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRzX19saWtlX2FjdGl2ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50TGlrZS50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzQXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVJlbW92ZUxpa2UodGhpcy5faWQpLnRoZW4oY2FyZFVwZGF0ZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpa2VzQXJyYXkgPSBjYXJkVXBkYXRlZC5saWtlcztcclxuICAgICAgICAgICAgICAgICAgICBsaWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkc19fbGlrZV9hY3RpdmVcIilcclxuICAgICAgICAgICAgICAgICAgICBjb3VudExpa2UudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlc0FycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfaGFuZGxlUmVtb3ZlKCkge1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19lbGVtZW50X3RyYXN0XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKHRoaXMuX2lkLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9zaG93Q2FyZCgpIHtcclxuICAgICAgICAvL0EgbGEgdGFyamV0YSBjcmVhZGEgc2UgbGUgZGEgZWwgZXZlbnRvIGNsaWNrIHF1ZSBub3MgcGVybWl0ZSBtb3N0cmFyIGxhIHRhcmpldGEgZW4gbGEgcGFudGFsbGEgdW5hIHZleiBxdWUgZWwgdXN1YXJpbyBsYSBzZWxlY2Npb25lXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19lbGVtZW50X2ltYWdlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayh7IGxpbms6IHRoaXMuX2xpbmssIG5hbWU6IHRoaXMuX25hbWUgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQW5kRGlzbGlrZSgpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZVJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMuX3Nob3dDYXJkKCk7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VuRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2soeyBsaW5rOiB0aGlzLl9saW5rLCBuYW1lOiB0aGlzLl9uYW1lIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vVXRpbGl6YSBsYSBwbGFudGlsbGEgY29sb2NhZGEgZW4gaHRtbCBwYXJhIGNyZWFyIGxhIG51ZXZhIHRhcmpldGEgaW5ncmVzYWRhIHBvciBlbCB1c3VhcmlvXHJcbiAgICBjcmVhdGVOZXdDYXJkKCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudF9pdGVtVGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlbkVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2VsZW1lbnRfaW1hZ2VcIik7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VuRWxlbWVudC5zcmMgPSB0aGlzLl9saW5rO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlbkVsZW1lbnQuYWx0ID0gdGhpcy5fbmFtZTtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzVXNlck93bmVyKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19lbGVtZW50X3RyYXN0XCIpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGlrZVN0YXR1cygpXHJcbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYXJkO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICAgICAgLy9SZWNpYmUgdW4gc2VsZWN0b3IgcG9wdXBcclxuICAgICAgICB0aGlzLl9wb3B1cFNlbGVjdG9yID0gcG9wdXBTZWxlY3RvcjtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3BvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcMO6YmxpY28gcGFyYSBhYnJpciBlbCBwb3B1cCBvIGxhIGltYWdlbiBzZWxlY2Npb25hZGFcclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgLy9BYnJpcsOhIGVsIHBvcHVwXHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwb3B1cF9zaG93XCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcMO6YmxpY28gcGFyYSBjZXJyYXIgZWwgcG9wdXAgbyBsYSBpbWFnZW4gc2VsZWNjaW9uYWRhXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICAvL0NlcnJhciBlbCBwb3B1cFxyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXBfc2hvd1wiKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9Nw6l0b2RvIHByaXZhZG8gcGFyYSBjZXJyYXIgZWwgcG9wdXAgYWwgcHVsc2FyIGxhIHRlY2xhIEVzY1xyXG4gICAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vTcOpdG9kbyBww7pibGljbyBwYXJhIGFncmVnYXIgZXZlbnRvcyBkZSBjbGljIGFsIGljb25vIGNlcnJhciB5IGVsIMOhcmVhIHNvbWJyZWFkYVxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgXCIucG9wdXBfX2Nsb3NlLWJ1dHRvblwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBhbGxPdmVybGF5ID1cclxuICAgICAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfX292ZXJsYXlcIik7XHJcbiAgICAgICAgLy8gY29uc3QgcG9wdXBTaG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9wb3B1cFNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbGxPdmVybGF5LmZvckVhY2goKG92ZXJsYXkpID0+IHtcclxuICAgICAgICAgICAgLy9DZXJyYXIgbGEgaW1hZ2VuIHBvcHVwIGFsIGRhciBjbGljIGVuIGVsIE92ZXJsYXlcclxuICAgICAgICAgICAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpOyAvL0NlcnJhciBhbCBwcmVzaW9uYXIgbGEgdGVjbGEgRXNjXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvciwgc3VibWlDYWxsYmFjaykge1xyXG4gICAgICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHN1Ym1pQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3RvcikucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICAvL23DqXRvZG8gcGFyYSBhbG1hY2VuYXIgbG9zIHZhbG9yZXMgZGUgdG9kb3MgbG9zIGNhbXBvcyBkZSBlbnRyYWRhXHJcbiAgICAgICAgY29uc3QgdmFsdWVzSW1wdXQgPSB7fTsgLy9PYmpldG8gcGFyYSBhbG1hY2VuYXIgdG9kb3MgbG9zIHZhbG9yZXMgZGUgbG9zIGNhbXBvcyBkZSBlbnRyYWRhXHJcbiAgICAgICAgY29uc3QgYWxsSW5wdXQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9ybV9faW5wdXRcIik7XHJcblxyXG4gICAgICAgIGFsbElucHV0LmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzSW1wdXRbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdmFsdWVzSW1wdXQ7XHJcbiAgICB9XHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7IC8vIFJlaW5pY2lhciBlbCBmb3JtdWxhcmlvIGFsIGNlcnJhciBlbCBwb3B1cFxyXG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24oZm9ybURhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX2Nsb3NlQnV0b25TZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKGNsb3NlQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiOy8vRXN0YSBjbGFzZSBsbyBxdWUgbm9zIHBlcm1pdGlyw6EgZXMgcXVlIGFsIG1vbWVudG8gZGUgZGFybGUgY2xpY2sgYSB1bmEgZGUgbGFzIGltw6FnZW5lcyBkZSBudWVzdHJhIHDDoWdpbmEsIGVzdGUgc2UgbW9zdHJhcsOhIGVuIGxhIHZlbnRhbmEsIHkgYWRlbWFzIHRlbmRyw6EgdW4gZGVzY3JpcGNpw7NuIGNvcnRhIGVuIGxhIHBhcnRlIGluZmVyaW9yIGRlIGxhIG1pc3RtYS5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihsaW5rLCBuYW1lKSB7XHJcbiAgICAgICAgY29uc3QgcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9wb3B1cFNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9pbWFnZSA9IHBvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI3BvcHVwX19pbWFnZVwiKTtcclxuICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IHBvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX190aXRsZVwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2ltYWdlICYmIHRoaXMuX2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlLnNyYyA9IGxpbms7XHJcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlLmFsdCA9IG5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgICAgICAgICAgc3VwZXIub3BlbigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiRWxlbWVudG8gZGUgaW1hZ2VuIG8gZGVzY3JpcGNpb24gbm8gZW5jb250cmFkYXNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24geyAgICAvL1JlY2liZSBlbCBtYXJjYWRvIGF0cmF2ZXogZGUgdW5hIGZ1bmNpw7MgZGUgY2FsbGJhY2sgeSBsbyBpc2VydGEgZW4gZWwgY29udGVuZWRvci5cclxuICAgIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNhcmRTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7IC8vQXJyYXkgZGUgZGF0b3NcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyOyAvL0Z1bmNpw7NuIHJlc3Bvc2FibGUgZGUgY3JlYXIgeSBtb3N0cmFyIGxvcyBkYXRvcyBlbiBsYSBww6FnaW5hXHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjYXJkU2VsZWN0b3IpOyAvL1NlbGVjY2lvbmEgbGEgY2xhc2UgZG9uZGUgdmFuIGxvcyBlbGVtZW50byBkZSBsYSB0YXJqZXRhXHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICAgICAgLy9Ub21hIHVuIGVsZW1lbnRvIGRlbCBET00geSBsbyBhZ3JlZ2EgYWwgY29udGVuZXJcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcmVyKCkge1xyXG4gICAgICAgIC8vUmVuZGVyaXphIGNhZGEgdW5vIGRlIGxvcyBlbGVtZW50b3MgZW4gbGEgcMOhZ2luYVxyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcmQgPSB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRJdGVtKGNhcmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHsgICAgLy9FcyBjYXBheiBkZSBwcmVzZW50YXIgaW5mb3JtYWNpw7NuIHNvYnJlIGVsIHVzdWFyaW8gZW4gbGEgcMOhZ2luYVxyXG4gICAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGpvYlNlbGVjdG9yIH0pIHtcclxuICAgICAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9qb2JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2JTZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTcOpdG9kbyBww7pibGljbyBwYXJhIG9idGVuZXIgaW5mb3JtYWNpw7NuIHNvYnJlIGVsIHVzdWFyaW9cclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgICAgICAgICBqb2I6IHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNw6l0b2RvIHDDumJsaWNvIHBhcmEgZXN0YWJsZWNlciBpbmZvcm1hY2nDs24gc29icmUgZWwgdXN1YXJpb1xyXG4gICAgc2V0VXNlckluZm8oeyBuYW1lLCBqb2IgfSkge1xyXG4gICAgICAgIHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gam9iO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoQ29uZmlybWF0aW9ucyBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIHN1Ym1pdENhbGxiYWNrKSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5zdWJtaXRDYWxsYmFjayA9IHN1Ym1pdENhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuX2Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKHN1Ym1pdENhbGxiYWNrKSB7XHJcbiAgICAgICAgc3VwZXIub3BlbigpO1xyXG4gICAgICAgIHRoaXMuc3VibWl0Q2FsbGJhY2sgPSBzdWJtaXRDYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgLy9tw6l0b2RvIHBhcmEgYWxtYWNlbmFyIGxvcyB2YWxvcmVzIGRlIHRvZG9zIGxvcyBjYW1wb3MgZGUgZW50cmFkYVxyXG4gICAgICAgIGNvbnN0IHZhbHVlc0ltcHV0ID0ge307IC8vT2JqZXRvIHBhcmEgYWxtYWNlbmFyIHRvZG9zIGxvcyB2YWxvcmVzIGRlIGxvcyBjYW1wb3MgZGUgZW50cmFkYVxyXG4gICAgICAgIGNvbnN0IGFsbElucHV0ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX2lucHV0XCIpO1xyXG5cclxuICAgICAgICBhbGxJbnB1dC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlc0ltcHV0W2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlc0ltcHV0O1xyXG4gICAgfVxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5yZXNldCgpOyAvLyBSZWluaWNpYXIgZWwgZm9ybXVsYXJpbyBhbCBjZXJyYXIgZWwgcG9wdXBcclxuICAgICAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3VibWl0Q2FsbGJhY2soKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX19zdWJtaXRfY2FuY2VsJykuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiLyoqXHJcbiBUT0tFTiA6IDY3OGZiZDkyLWU2ZTQtNDA0NC1iMDQ3LTc0Y2UzMzRmZmQ0ZVxyXG4gR1JVUE86IHdlYl9lc18xMVxyXG4gVVJMIDogaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS93ZWJfZXNfMTEvY2FyZHNcclxuICovXHJcblxyXG5jbGFzcyBBcGkge1xyXG4gICAgY29uc3RydWN0b3IodXJsLCB0b2tlbikge1xyXG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcclxuICAgICAgICB0aGlzLl90b2tlbiA9IHRva2VuO1xyXG4gICAgfTtcclxuXHJcbiAgICAvL01ldG9kb3MgcGFyYSBjYXJnYXIgbG9zIGRhdG9zIGRlbCB1c3VhcmlvIGFsIGNhcmdhciBsYSBww6FnaW5hXHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZWAsIC8vUmFsaXphIGxhIHBldGljacOzbiBhbCBzZXJ2aWRvciBkZSBsYSBpbmZvcm1hY2nDs24gZGVsIHVzdWFyaW9cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSkgLy9Db252aWVydGUgbG9zIGRhdG9zIGVuIGZvcm1hdG8gSlNPTlxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOicsIGVycik7IC8vU2kgbGEgcmVzcHVlc3RhIG5vIGVzIGNvcnJlY3RhIHNlIGltcHJpbWlyw6EgdW4gbWVuc2FqZSBkZSBlcnJvclxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8vTWV0b2RvcyBwYXJhIG9idGVuZXIgbGFzIHRhcmpldGFzIGRlbCBzZXJ2aWRvciB5IGNhcmdhcmxhcyBlbiBsYSBww6FnaW5hXHJcbiAgICBnZXRJbml0aWFsQ2FyZCgpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkc2AsIC8vUmVhbGl6YSBsYSBwZXRpY2nDs24gYWwgc2Vydmlkb3IgZGUgbGFzIHRhcmpldGFzIHByaW5jaXBhbGVzIHBhcmEgY2FyZ2FybGFzXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSkgLy9Db252aWVydGUgbG9zIGRhdG9zIHJlY2l2aWRvcyBlbiBmb3JtYXRvIEpTT05cclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvcjonLCBlcnIpIC8vU2kgbGEgcmVzcHVlc3RhIGVzIGluY29ycmVjdGEgaW1wcmltaXLDoSB1biBtZW5zYWplIGRlIGVycm9yXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy9Nw6l0b2RvIHBhcmEgZWRpdGFyIGxhIGluZm9ybWFjacOzbiBkZWwgdXN1YXJpbyBkZXNkZSBlbCBzZXJ2aWRvclxyXG4gICAgdXBkYXRlVXNlcihuYW1lLCBhYm91dCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lYCwgeyAvL1JlYWxpemEgdW5hIHBldGljacOzbiBkZSBjYW1iaW8gZGUgZGF0b3MgZGVsIHBlcmZpbCBkZSB1c3VhcmlvXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgYWJvdXQ6IGFib3V0LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpIC8vQ29udmllcnRlIGxvcyBkYXRvcyByZWNpYmlvcyBlbiBmb3JtYXRvIEpTT05cclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnIpIC8vU2kgYWxnbyBzYWxlIG1hbCBtZSBtb3N0cmFyw6EgdW4gbWVuc2FqZSBkZSBlcnJvclxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcGFyYSBhY3R1YWxpemFyIGxhIGZvdG8gZGVsIHBlcmZpbCBkZSB1c3VhcmlvXHJcbiAgICB1cGRhdGVVc2VyUGhvdG8obGluaykge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lL2F2YXRhcmAsIHsgLy9SZWFsaXphIHVuYSBwZXRpY2nDs24gZGUgY2FtYmlvIGRlIGxhIGZvdG8gZGUgcGVyZmlsIGRlIHVzdWFyaW9cclxuICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIGF2YXRhcjogbGluayxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhpcygocmVzKSA9PiByZXMuanNvbigpKSAvL0NvbnZpZXRlIGxvcyBkYXRvcyBlbiBmb3JtYXRvIEpTT05cclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6XCIsIGVycik7IC8vU2kgc2UgcHJlc2VudGEgdW4gZXJyb3Igbm9zIG1vc3RyYXLDoSB1biBtZW5zYWplIGVuIGxhIGNvbnNvbGEgY29uIGVsIGVycm9yXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy9Nw6l0b2RvIHBhcmEgYcOxYWRpciB1bmEgbnVldmEgdGFyZ2V0YSBhbCBzZXJ2aWRvclxyXG4gICAgYWRkQ2FyZChuYW1lLCBsaW5rKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7IC8vUmVhbGl6YSB1bmEgcGV0aWNpw7NuIHBhcmEgYWdyZWdhciB1bmEgdnVldmEgdGFyamV0YSBhbCBzZXJ2aWRvclxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKSAvL0NvbnZpZXJ0ZSBsb3MgZGF0b3MgZW4gZm9ybWF0byBKU09OXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyKSAvLyBTaSBhbGdvIHNhbGUgbWFsIG1lIG1vc3RyYXLDoSB1biBtZW5zYWplIGRlIGVycm9yXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vTcOpdG9kbyBwYXJhIG1vc3RyYXIgbGEgY2FudGlkYWQgZGUgbGlrZSBkZSBjYWRhIHRhcmpldGFcclxuICAgIGxpbmtDYXJkKGNhcmRJZCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHsgLy9TZSByZWFsaXphIHVuYSBwZXRpY2nDs24gcGFyYSBlbGltaWFyIHVuYSB0YXJqZXRhIHNlbGVjY2lvbmFkYVxyXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSkvL0NvdmllcnRlIGxvcyBkYXRvcyBlbiBmb3JtYXRvIEpTT05cclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnIpIC8vU2kgYWxnbyBzYWxlIG1hbCBzZSBtb3N0cmFyw6EgdW4gbWVuc2FqZSBkZSBlcnJvclxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgLy9Nw6l0b2RvIHBhcmEgZWxpbWluYXIgdW5hIHRhcmpldGEgc2VsZWNjaW9uYWRhXHJcbiAgICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzLyR7Y2FyZElkfWAsIHsgLy9TZSByZWFsaXphIHVuYSBwZXRpY2nDs24gcGFyYSBlbGltaWFyIHVuYSB0YXJqZXRhIHNlbGVjY2lvbmFkYVxyXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKS8vQ292aWVydGUgbG9zIGRhdG9zIGVuIGZvcm1hdG8gSlNPTlxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIsIGVycikgLy9TaSBhbGdvIHNhbGUgbWFsIHNlIG1vc3RyYXLDoSB1biBtZW5zYWplIGRlIGVycm9yXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy9Nw6l0b2RvIHBhcmEgZWxpbWluYXIgdW4gbGlrZSBkZSB1bmEgdGFyamV0YSBzZWxlY2Npb25hZGFcclxuICAgIGRlbGV0ZUNhcmRMaW5rKGNhcmRJZCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHsgLy9TZSByZWFsaXphIHVuYSBwZXRpY2nDs24gcGFyYSBlbGltaWFyIHVuYSB0YXJqZXRhIHNlbGVjY2lvbmFkYVxyXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSkvL0NvdmllcnRlIGxvcyBkYXRvcyBlbiBmb3JtYXRvIEpTT05cclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnIpIC8vU2kgYWxnbyBzYWxlIG1hbCBzZSBtb3N0cmFyw6EgdW4gbWVuc2FqZSBkZSBlcnJvclxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBBcGkoJ2h0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvd2ViX2VzXzExJywgXCI2NzhmYmQ5Mi1lNmU0LTQwNDQtYjA0Ny03NGNlMzM0ZmZkNGVcIik7IiwiY29uc3QgYWxsRm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1cIik7XHJcbmNvbnN0IHBvcHVwRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBcIik7XHJcbmNvbnN0IGJ1dHRvbkVkaWRQcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5idXR0b25zX19pdGVtX2luZGV4X3Byb2ZpbGVcIik7XHJcbmNvbnN0IGJ1dHRvbkFkZENhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1dHRvbnNfX2l0ZW1faW5kZXhfYWRkLWNhcmRcIik7XHJcbmNvbnN0IGFsbE92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcHVwX19vdmVybGF5XCIpO1xyXG5jb25zdCBhbGxJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9ybV9fZXJyb3JcIik7XHJcbmNvbnN0IHBvcHVwUHJvZmlsZSA9IFwiLnBvcHVwX2VkaXQtcHJvZmlsZVwiO1xyXG5jb25zdCBwb3B1cEFkZENhcmQgPSBcIi5wb3B1cF9jb250ZW50LWFkZGNhcmRcIjtcclxuY29uc3QgcG9wdXBJbWFnZSA9IFwiLnBvcHVwX2NvbnRlbnQtaW1hZ2VcIjtcclxuY29uc3QgcHJvcHVwRGVsZXRlQ29maXJtYXRpb24gPSBcIi5wb3B1cF9kZWxldGUtY2FyZFwiO1xyXG5jb25zdCBwb3B1cEVkaXRBdmF0YXIgPSBcIi5wb3B1cF9hdmF0YXJcIjtcclxuY29uc3QgYnV0dG9uQ2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jbG9zZS1idXR0b25cIik7XHJcbmNvbnN0IGJ1dHRvbkxpa2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19lbGVtZW50X2l0ZW0taW1hZ2VuXCIpO1xyXG5jb25zdCBidXR0b25SZWN5Y2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jYXJkc19fZWxlbWVudF90cmFzdFwiKTtcclxuY29uc3QgYnV0dG9uRWRpdEF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnV0dG9uc19fZWRpdFwiKTtcclxuY29uc3QgYnV0dG9uUGhvdG9Qcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtX19zdWJtaXRfbmV3UGhvdG9cIik7XHJcbmNvbnN0IGNhcmRUZW1wbGF0ZSA9IFwiI25ld0VsZW1lbnRcIjtcclxuY29uc3QgY2FyZHNBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc1wiKTtcclxuXHJcbi8vIGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuLy8gICAgIHtcclxuLy8gICAgICAgICBuYW1lOiBcIlZhbGxlIGRlIFlvc2VtaXRlXCIsXHJcbi8vICAgICAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL25ldy1tYXJrZXRzL1dFQl9zcHJpbnRfNS9FUy95b3NlbWl0ZS5qcGdcIixcclxuLy8gICAgICAgICBhbHQ6IFwiVmFsbGUgWW9zZW1pZSBWYWxsZXlcIixcclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgbmFtZTogXCJMYWdvIExvdWlzZVwiLFxyXG4vLyAgICAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9uZXctbWFya2V0cy9XRUJfc3ByaW50XzUvRVMvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbi8vICAgICAgICAgYWx0OiBcIkxhZ28gTGFrZSBMb3Vpc2VcIixcclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgbmFtZTogXCJNb250YcOxYXMgQ2FsdmFzXCIsXHJcbi8vICAgICAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL25ldy1tYXJrZXRzL1dFQl9zcHJpbnRfNS9FUy9iYWxkLW1vdW50YWlucy5qcGdcIixcclxuLy8gICAgICAgICBhbHQ6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbi8vICAgICAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL25ldy1tYXJrZXRzL1dFQl9zcHJpbnRfNS9FUy9sYXRlbWFyLmpwZ1wiLFxyXG4vLyAgICAgICAgIGFsdDogXCJMYXRlbWFyXCIsXHJcbi8vICAgICB9LFxyXG4vLyAgICAge1xyXG4vLyAgICAgICAgIG5hbWU6IFwiUGFycXVlIE5hY2lvbmFsIGRlIGxhIFZhbm9pc2VcIixcclxuLy8gICAgICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vbmV3LW1hcmtldHMvV0VCX3NwcmludF81L0VTL3Zhbm9pc2UuanBnXCIsXHJcbi8vICAgICAgICAgYWx0OiBcIlZhbm9pc2UgTmF0aW9uYWxcIixcclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4vLyAgICAgICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9uZXctbWFya2V0cy9XRUJfc3ByaW50XzUvRVMvbGFnby5qcGdcIixcclxuLy8gICAgICAgICBhbHQ6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuLy8gICAgIH0sXHJcbi8vIF07XHJcbmV4cG9ydCB7XHJcbiAgICBwb3B1cEltYWdlLFxyXG4gICAgcG9wdXBQcm9maWxlLFxyXG4gICAgYWxsRm9ybXMsXHJcbiAgICBwb3B1cEZvcm0sXHJcbiAgICBidXR0b25FZGlkUHJvZmlsZSxcclxuICAgIGJ1dHRvbkFkZENhcmQsXHJcbiAgICBhbGxPdmVybGF5LFxyXG4gICAgYWxsSW5wdXQsXHJcbiAgICBwb3B1cEFkZENhcmQsXHJcbiAgICBidXR0b25DbG9zZSxcclxuICAgIGJ1dHRvbkxpa2UsXHJcbiAgICBidXR0b25SZWN5Y2xlLFxyXG4gICAgY2FyZFRlbXBsYXRlLFxyXG4gICAgcHJvcHVwRGVsZXRlQ29maXJtYXRpb24sXHJcbiAgICBwb3B1cEVkaXRBdmF0YXIsXHJcbiAgICBidXR0b25FZGl0QXZhdGFyLFxyXG4gICAgYnV0dG9uUGhvdG9Qcm9maWxlLFxyXG59O1xyXG4iLCJpbXBvcnQgXCIuL3N0eWxlcy9pbmRleC5jc3NcIjtcblxuaW1wb3J0IHsgcmVzZXRGb3JtcyB9IGZyb20gXCIuL3V0aWxzL3V0aWxzLmpzXCI7XG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aENvbmZpcm1hdGlvbiBmcm9tIFwiLi9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qc1wiO1xuaW1wb3J0IHsgYXBpIH0gZnJvbSBcIi4vY29tcG9uZW50cy9BcGlzLmpzXCI7XG5pbXBvcnQge1xuICAgIHBvcHVwSW1hZ2UsXG4gICAgYWxsRm9ybXMsXG4gICAgY2FyZFRlbXBsYXRlLFxuICAgIGJ1dHRvbkFkZENhcmQsXG4gICAgYnV0dG9uRWRpZFByb2ZpbGUsXG4gICAgcG9wdXBQcm9maWxlLFxuICAgIHBvcHVwQWRkQ2FyZCxcbiAgICBwcm9wdXBEZWxldGVDb2Zpcm1hdGlvbixcbiAgICBwb3B1cEVkaXRBdmF0YXIsXG4gICAgYnV0dG9uRWRpdEF2YXRhcixcbiAgICBidXR0b25SZWN5Y2xlLFxuICAgIGJ1dHRvblBob3RvUHJvZmlsZSxcbn0gZnJvbSBcIi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgYXN5bmMgKCkgPT4ge1xuXG4gICAgY29uc3QgY3VycmVudFVzZXIgPSBhd2FpdCBhcGkuZ2V0VXNlckluZm8oKTtcblxuICAgIC8vQ2xhc2UgZW5jYXJnYWRhIGRlIG1vc3RyYXIgbGEgaW1hZ2VuIHNlbGVjY2lvbmFkYSBlbiBsYSB2ZW50YW5hIGVtZXJnZW50ZVxuICAgIGNvbnN0IHBvcHV0SW1hZ2VuID0gbmV3IFBvcHVwV2l0aEltYWdlKHBvcHVwSW1hZ2UpO1xuICAgIHBvcHV0SW1hZ2VuLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAvL0Z1bmNpw7NuIHBhcmEgZWRpdGFyIGVsIHBlcmZpbCBkZWxcbiAgICBjb25zdCBoYW5kbGVDYXJkQ2xpY2sgPSAoZGF0YSkgPT4geyBwb3B1dEltYWdlbi5vcGVuKGRhdGEubGluaywgZGF0YS5uYW1lKSB9O1xuXG5cbiAgICAvL0Z1bmNpw7NuIHBhcmEgY3JlYXIgdW5hIG51ZXZhIHRhcmpldGFcbiAgICBjb25zdCBjcmVhdGVDYXJkcyA9IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhcmRzSW50YW5jZSA9IG5ldyBDYXJkKHtcbiAgICAgICAgICAgIGRhdGEsIGhhbmRsZUNhcmRDbGljayxcbiAgICAgICAgICAgIGhhbmRsZURlbGV0ZUNsaWNrOiAoY2FyRWxlbWVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICBwb3B1cEZvcm1EZWxldGVkQ29uZmlybWF0aW9uLm9wZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhcGkuZGVsZXRlQ2FyZChjYXJFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBGb3JtRGVsZXRlZENvbmZpcm1hdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYW5kbGVBZGRMaWtlOiAoY2FyZElkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5saW5rQ2FyZChjYXJkSWQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFuZGxlUmVtb3ZlTGlrZTogY2FyZElkID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmRlbGV0ZUNhcmRMaW5rKGNhcmRJZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcmRUZW1wbGF0ZSwgY3VycmVudFVzZXJcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGNhcmRzSW50YW5jZS5jcmVhdGVOZXdDYXJkKCk7XG4gICAgfTtcblxuICAgIC8vIGZldGNoKFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS93ZWJfZXNfMTEvY2FyZHNcIiwge1xuICAgIC8vICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgLy8gICAgIGhlYWRlcnM6IHtcbiAgICAvLyAgICAgICAgIEF1dGhvcml6YXRpb246IFwiNjc4ZmJkOTItZTZlNC00MDQ0LWIwNDctNzRjZTMzNGZmZDRlXCJcbiAgICAvLyAgICAgfVxuICAgIC8vIH0pXG4gICAgLy8gICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgLy8gICAgIC50aGVuKChpbml0aWFsQ2FyZHMpID0+IHtcblxuICAgIC8vICAgICAgICAgY29uc3QgbXlTZWN0aW9uID0gbmV3IFNlY3Rpb24oXG4gICAgLy8gICAgICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgICAgICBpdGVtczogaW5pdGlhbENhcmRzLFxuICAgIC8vICAgICAgICAgICAgICAgICByZW5kZXJlcjogKGl0ZW0pID0+IHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDYXJkcyhpdGVtKTtcbiAgICAvLyAgICAgICAgICAgICAgICAgfSxcbiAgICAvLyAgICAgICAgICAgICB9LFxuICAgIC8vICAgICAgICAgICAgICcuY2FyZHMnXG4gICAgLy8gICAgICAgICApO1xuICAgIC8vICAgICAgICAgbXlTZWN0aW9uLnJlbmRlcmVyKCk7XG5cbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAvLyAgICAgfSk7XG5cbiAgICBhcGkuZ2V0SW5pdGlhbENhcmQoKS50aGVuKChpbml0aWFsQ2FyZHMpID0+IHtcblxuICAgICAgICBjb25zdCBteVNlY3Rpb24gPSBuZXcgU2VjdGlvbihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtczogaW5pdGlhbENhcmRzLFxuICAgICAgICAgICAgICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2FyZHMoaXRlbSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnLmNhcmRzJ1xuICAgICAgICApO1xuICAgICAgICBteVNlY3Rpb24ucmVuZGVyZXIoKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KTtcblxuXG4gICAgLy9DbGFzZSBxdWUgYWxhbWNlbmFyw6EgbG9zIGRhdG9zIGRlbCB1c3VhcmlvXG4gICAgY29uc3QgdXNlckRhdGEgPSBuZXcgVXNlckluZm8oe1xuICAgICAgICBuYW1lU2VsZWN0b3I6IFwiLmJ1dHRvbnNfX25hbWVcIixcbiAgICAgICAgam9iU2VsZWN0b3I6IFwiLmJ1dHRvbnNfX2V4cGxvcmVyXCIsXG4gICAgfSk7XG5cbiAgICAvL0luc3RhbmNpYW1vcyB0b2RhcyBsYXMgY2xhc2VzIHBhcmEgbG9zIHBvcHVwXG4gICAgY29uc3QgcG9wdXBGb3JtRWRpdFByb2ZpbGUgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cFByb2ZpbGUsIChmb3JtRGF0YSkgPT4ge1xuICAgICAgICB1c2VyRGF0YS5zZXRVc2VySW5mbyh7IG5hbWU6IGZvcm1EYXRhLm5hbWUsIGpvYjogZm9ybURhdGEuYWN0aXZpdHkgfSk7XG4gICAgICAgIHBvcHVwRm9ybUVkaXRQcm9maWxlLmNsb3NlKCk7XG4gICAgICAgIHJlc2V0Rm9ybXMoYWxsRm9ybXMpO1xuICAgIH0pO1xuICAgIHBvcHVwRm9ybUVkaXRQcm9maWxlLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAvL0PDs2RpZ28gcGFyYSBicmlyIGVsIHBvcHVwIGRlIGVkaXRhciBwZXJmaWxcbiAgICBidXR0b25FZGlkUHJvZmlsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBwb3B1cEZvcm1FZGl0UHJvZmlsZS5vcGVuKCk7XG4gICAgfSk7XG5cbiAgICAvL0luc3RhbmNpYSBkZSBwb3B1cFdpdGhGb3JtIHBhcmEgbWFuZWphciBlbCBmb3JtdWxhcmlvIGRlIGHDsWFkaXIgbGEgdGFyamV0YVxuICAgIGNvbnN0IHBvcHVwRm9ybUNvbnRlbnRBZGRDYXJkID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBBZGRDYXJkLCAoZm9ybURhdGEpID0+IHtcbiAgICAgICAgYXBpLmFkZENhcmQoZm9ybURhdGEubmV3cGxhY2UsIGZvcm1EYXRhLmVubGFjZSkudGhlbihjYXJkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkcyhjYXJkKVxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc1wiKS5wcmVwZW5kKG5ld0NhcmQpO1xuICAgICAgICAgICAgcG9wdXBGb3JtQ29udGVudEFkZENhcmQuY2xvc2UoKTtcbiAgICAgICAgICAgIC8vcmVzZXRGb3JtcyhhbGxGb3Jtcyk7XG4gICAgICAgIH0pXG4gICAgfSk7XG4gICAgcG9wdXBGb3JtQ29udGVudEFkZENhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIC8vQ29kaWdvIHBhcmEgYWJyaWwgZWwgZm9ybXVsYXJpbyBkZSBhw7FhZGlyIHRhcmpldGEgZGFuZG8gY2xpY2sgZW4gdW4gYm90b24gZGUgYWJyaXIgZWwgcG9wdXBcbiAgICBidXR0b25BZGRDYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHBvcHVwRm9ybUNvbnRlbnRBZGRDYXJkLm9wZW4oKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHBvcHVwRm9ybUVkaXRBdmF0YXIgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cEVkaXRBdmF0YXIsICgpID0+IHsgfSk7XG4gICAgcG9wdXBGb3JtRWRpdEF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIGJ1dHRvbkVkaXRBdmF0YXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgcG9wdXBGb3JtRWRpdEF2YXRhci5vcGVuKCk7XG4gICAgfSk7XG4gICAgYnV0dG9uUGhvdG9Qcm9maWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cbiAgICB9KTtcblxuICAgIGNvbnN0IHBvcHVwRm9ybURlbGV0ZWRDb25maXJtYXRpb24gPSBuZXcgUG9wdXBXaXRoQ29uZmlybWF0aW9uKHByb3B1cERlbGV0ZUNvZmlybWF0aW9uKTtcbiAgICBwb3B1cEZvcm1EZWxldGVkQ29uZmlybWF0aW9uLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgYnV0dG9uUmVjeWNsZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBwb3B1cEZvcm1EZWxldGVkQ29uZmlybWF0aW9uLm9wZW4oKTtcbiAgICAgICAgfSk7XG4gICAgfSlcblxuXG4gICAgLy9WYWxpZGFjacOzbiBkZWwgZm9ybXVsYXJpb1xuICAgIC8vIGNvbnN0IFZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcihhbGxGb3Jtcyk7XG4gICAgLy9WYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcblxufSlcbiIsIi8vIEZ1bmNpw7NuIHF1ZSBub3MgcGVybWl0ZSByZXNldGVhciBsb3MgZm9ybXVsYXJpb3MgeSB0YW1iacOpblxyXG5mdW5jdGlvbiByZXNldEZvcm1zKGZvcm1zKSB7XHJcbiAgICBmb3Jtcy5mb3JFYWNoKChmb3JtKSA9PiB7XHJcbiAgICAgICAgLy8gUmVzZXRlYSBjYWRhIGVudHJhZGEgZGUgbG9zIGZvcm11bGFyaW9zIHBhcmEgZWxpbWluYXIgbG9zIGRhdG9zIHF1ZSBxdWVkYW5cclxuICAgICAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgZm9ybS5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX3N1Ym1pdFwiKS5jbGFzc0xpc3QuYWRkKFwiYnV0dG9uX2luYWN0aXZlXCIpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHJlc2V0Rm9ybXMgfTtcclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJfcmVmIiwiY2FyZFNlbGVjdG9yIiwidXNlciIsImRhdGEiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVBZGRMaWtlIiwiaGFuZGxlUmVtb3ZlTGlrZSIsImhhbmRsZURlbGV0ZUNsaWNrIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9saW5rIiwibGluayIsIl9uYW1lIiwibmFtZSIsIl9pZCIsIl9vd25lciIsIm93bmVyIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfbGlrZXNBcnJheSIsImxpa2VzIiwiX3VzZXIiLCJfaGFuZGxlQWRkTGlrZSIsIl9oYW5kbGVEZWxldGVDbGljayIsIl9oYW5kbGVSZW1vdmVMaWtlIiwia2V5IiwidmFsdWUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX3RoaXMiLCJzb21lIiwibGlrZSIsImxpa2VCdXR0b24iLCJfZWxlbWVudCIsImxpa2VDb3VudCIsIl9pc0xpa2VkIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwidGV4dENvbnRlbnQiLCJsZW5ndGgiLCJfdGhpczIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJjb3VudExpa2UiLCJ0aGVuIiwiY2FyZFVwZGF0ZWQiLCJfdGhpczMiLCJfdGhpczQiLCJfdGhpczUiLCJfaGFuZGxlTGlrZUFuZERpc2xpa2UiLCJfaGFuZGxlUmVtb3ZlIiwiX3Nob3dDYXJkIiwiX2ltYWdlbkVsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJzcmMiLCJhbHQiLCJfaXNVc2VyT3duZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJfdXBkYXRlTGlrZVN0YXR1cyIsIl9zZXRFdmVudExpc3RlbmVycyIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImV2dCIsImNsb3NlIiwiX3BvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbG9zZUJ1dHRvbiIsImFsbE92ZXJsYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIm92ZXJsYXkiLCJQb3B1cFdpdGhGb3JtIiwiX1BvcHVwIiwic3VibWlDYWxsYmFjayIsIl9jYWxsU3VwZXIiLCJfc3VibWl0QnV0dG9uIiwiX2Zvcm0iLCJfaW5oZXJpdHMiLCJ2YWx1ZXNJbXB1dCIsIml0ZW0iLCJyZXNldCIsIl9nZXQiLCJfZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJjYWxsIiwicHJldmVudERlZmF1bHQiLCJmb3JtRGF0YSIsIl9nZXRJbnB1dFZhbHVlcyIsIl9jbG9zZUJ1dG9uU2VsZWN0b3IiLCJQb3B1cFdpdGhJbWFnZSIsInBvcHVwRWxlbWVudCIsIl9pbWFnZSIsIl9kZXNjcmlwdGlvbiIsImFsZXJ0IiwiU2VjdGlvbiIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiaW5uZXJIVE1MIiwiZWxlbWVudCIsImFwcGVuZCIsImNsZWFyIiwiY2FyZCIsImFkZEl0ZW0iLCJVc2VySW5mbyIsIm5hbWVTZWxlY3RvciIsImpvYlNlbGVjdG9yIiwiX25hbWVFbGVtZW50IiwiX2pvYkVsZW1lbnQiLCJqb2IiLCJfcmVmMiIsIlBvcHVwV2l0aENvbmZpcm1hdGlvbnMiLCJzdWJtaXRDYWxsYmFjayIsImFwaSIsIkFwaSIsInVybCIsInRva2VuIiwiX3VybCIsIl90b2tlbiIsImZldGNoIiwiY29uY2F0IiwibWV0aG9kIiwiaGVhZGVycyIsInJlcyIsImpzb24iLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJhYm91dCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYXZhdGFyIiwiY2FyZElkIiwiYWxsRm9ybXMiLCJidXR0b25FZGlkUHJvZmlsZSIsImJ1dHRvbkFkZENhcmQiLCJidXR0b25SZWN5Y2xlIiwiYnV0dG9uRWRpdEF2YXRhciIsImJ1dHRvblBob3RvUHJvZmlsZSIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJlIiwidCIsInIiLCJPYmplY3QiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZXR1cm4iLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJpbmZvIiwiZXJyb3IiLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsInVuZGVmaW5lZCIsIl9jYWxsZWUiLCJjdXJyZW50VXNlciIsInBvcHV0SW1hZ2VuIiwiY3JlYXRlQ2FyZHMiLCJ1c2VyRGF0YSIsInBvcHVwRm9ybUVkaXRQcm9maWxlIiwicG9wdXBGb3JtQ29udGVudEFkZENhcmQiLCJwb3B1cEZvcm1FZGl0QXZhdGFyIiwicG9wdXBGb3JtRGVsZXRlZENvbmZpcm1hdGlvbiIsIl9jb250ZXh0IiwiZ2V0VXNlckluZm8iLCJzZXRFdmVudExpc3RlbmVycyIsIm9wZW4iLCJjYXJFbGVtZW50IiwiY2FsbGJhY2siLCJkZWxldGVDYXJkIiwibGlua0NhcmQiLCJkZWxldGVDYXJkTGluayIsImNyZWF0ZU5ld0NhcmQiLCJnZXRJbml0aWFsQ2FyZCIsImluaXRpYWxDYXJkcyIsInNldFVzZXJJbmZvIiwiYWN0aXZpdHkiLCJmb3JtIiwiYWRkQ2FyZCIsIm5ld3BsYWNlIiwiZW5sYWNlIiwibmV3Q2FyZCIsInByZXBlbmQiLCJQb3B1cFdpdGhDb25maXJtYXRpb24iXSwic291cmNlUm9vdCI6IiJ9