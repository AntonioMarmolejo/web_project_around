/*! For license information please see main.js.LICENSE.txt */
!function(){"use strict";function t(t){t.forEach((function(t){t.reset(),t.querySelectorAll(".form__submit").forEach((function(t){t.classList.contains("form__submit_confirmation")||t.classList.add("button_inactive")}))}))}function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,r(o.key),o)}}function r(t){var n=function(t,n){if("object"!=e(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!=e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==e(n)?n:n+""}var o=function(){return t=function t(e,n,r){var o=e.data,i=e.handleCardClick,c=e.handleDeleteClick,a=e.handleAddLike,u=e.handleRemoveLike;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._link=o.link,this._name=o.name,this._id=o._id,this._owner=o.owner,this._cardSelector=n,this._handleCardClick=i,this._likesArray=o.likes||{},this._user=r,this._handleAddLike=a,this._handleDeleteClick=c,this._handleRemoveLike=u},(e=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".cards__element").cloneNode("true")}},{key:"_isLiked",value:function(){var t=this;return this._likesArray.some((function(e){return e._id===t._user._id}))}},{key:"_isUserOwner",value:function(){return this._user._id===this._owner._id}},{key:"_updateLikeStatus",value:function(){var t=this._element.querySelector(".cards__element_itemImage"),e=this._element.querySelector(".countlike");this._isLiked()?t.classList.add("cards__like_active"):t.classList.remove("cards__like_active"),e.textContent=this._likesArray.length}},{key:"_handleLikeAndDislike",value:function(){var t=this;this._element.querySelector(".cards__element_itemImage").addEventListener("click",(function(e){var n=e.target,r=t._element.querySelector(".countlike");t._isLiked()?t._handleRemoveLike(t._id).then((function(e){t._likesArray=e.likes,n.classList.remove("cards__like_active"),r.textContent=t._likesArray.length})):t._handleAddLike(t._id).then((function(e){t._likesArray=e.likes,n.classList.add("cards__like_active"),r.textContent=t._likesArray.length}))}))}},{key:"_handleRemove",value:function(){var t=this;this._element.querySelector(".cards__element_trast").addEventListener("click",(function(){t._handleDeleteClick(t._id,(function(){t._element.remove()}))}))}},{key:"_showCard",value:function(){var t=this;this._element.querySelector(".cards__element_image").addEventListener("click",(function(){t._handleCardClick({link:t._link,name:t._name})}))}},{key:"_setEventListeners",value:function(){var t=this;this._handleLikeAndDislike(),this._handleRemove(),this._showCard(),this._imagenElement.addEventListener("click",(function(){t._handleCardClick({link:t._link,name:t._name})}))}},{key:"createNewCard",value:function(){return this._element=this._getTemplate(),this._element.querySelector(".cards__element_itemTitle").textContent=this._name,this._imagenElement=this._element.querySelector(".cards__element_image"),this._imagenElement.src=this._link,this._imagenElement.alt=this._name,this._isUserOwner()||(this._element.querySelector(".cards__element_trast").style.display="none"),this._updateLikeStatus(),this._setEventListeners(),this._element}}])&&n(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,u(r.key),r)}}function a(t,e,n){return(e=u(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t){var e=function(t,e){if("object"!=i(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==i(e)?e:e+""}var l=function(){return t=function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"_showInputError",(function(t,e){var n=t.parentElement.querySelector(".form__error");t.classList.add("form__input_type_error"),n.textContent=e,n.classList.add("form__input-error_active")})),a(this,"_hideInputError",(function(t){var e=t.parentElement.querySelector(".form__error");t.classList.remove("form__input_type_error"),e.classList.remove("form__input-error_active"),e.textContent=""})),a(this,"_checkInputValidity",(function(t){t.validity.valid?n._hideInputError(t):n._showInputError(t,t.validationMessage)})),a(this,"_hasInvalidInput",(function(t){return t.some((function(t){return!t.validity.valid}))})),a(this,"_toggleButtonState",(function(t,e){n._hasInvalidInput(t)?e.classList.add("button_inactive"):e.classList.remove("button_inactive")})),a(this,"enableValidation",(function(){n._allForms.forEach((function(t){t.addEventListener("submit",(function(t){t.preventDefault()})),Array.from(document.forms).forEach((function(t){n._setEventListeners(t)}))}))})),this._allForms=e,this.enableValidation()},(e=[{key:"_setEventListeners",value:function(t){var e=this,n=Array.from(t.querySelectorAll(".form__input")),r=t.querySelector(".form__submit");n.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState(n,r)}))}))}}])&&c(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}(),s=l;function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,y(r.key),r)}}function y(t){var e=function(t,e){if("object"!=f(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==f(e)?e:e+""}var h=function(){return t=function t(e){var n,r,o,i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=function(t){"Escape"===t.key&&i.close()},(r=y(r="_handleEscClose"))in n?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,this._popupSelector=e,this._popupElement=document.querySelector(this._popupSelector),this._handleEscClose=this._handleEscClose.bind(this),this._buttonPopup=this._popupElement.querySelector(".form__submit")},(e=[{key:"open",value:function(){this._popupElement.classList.add("popup_show"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_show"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var t=this,e=this._popupElement.querySelector(".popup__close-button"),n=this._popupElement.querySelectorAll(".popup__overlay");e.addEventListener("click",(function(){t.close()})),n.forEach((function(e){e.addEventListener("click",(function(){t.close()}))})),document.addEventListener("keydown",this._handleEscClose)}}])&&p(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,v(r.key),r)}}function v(t){var e=function(t,e){if("object"!=m(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=m(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==m(e)?e:e+""}function _(t,e,n){return e=w(e),function(t,e){if(e&&("object"===m(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,b()?Reflect.construct(e,n||[],w(t).constructor):e.apply(t,n))}function b(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(b=function(){return!!t})()}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=w(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},g.apply(this,arguments)}function w(t){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},w(t)}function S(t,e){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},S(t,e)}var E=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=_(this,e,[t]))._submitButton=n,r._form=document.querySelector(t).querySelector(".form"),r._submitButtons=document.querySelector(t).querySelector(".form__submit"),r._initialSubmitButtonText=r._submitButtons.value,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&S(t,e)}(e,t),n=e,(r=[{key:"_getInputValues",value:function(){var t={};return this._form.querySelectorAll(".form__input").forEach((function(e){e.name&&(t[e.name]=e.value)})),t}},{key:"close",value:function(){this._form.reset(),g(w(e.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var t=this;g(w(e.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),t._submitButtons.value="Guardando...";var n=t._getInputValues();t._submitButton(n).finally((function(){t._submitButtons.value=t._initialSubmitButtonText})),t.close()}));var n=this._form.querySelector(this._closeButonSelector);n&&n.addEventListener("click",(function(e){e.preventDefault(),t.close()}))}}])&&d(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(h);function k(t){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k(t)}function L(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,j(r.key),r)}}function j(t){var e=function(t,e){if("object"!=k(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==k(e)?e:e+""}function O(t,e,n){return e=q(e),function(t,e){if(e&&("object"===k(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,P()?Reflect.construct(e,n||[],q(t).constructor):e.apply(t,n))}function P(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(P=function(){return!!t})()}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=q(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},C.apply(this,arguments)}function q(t){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},q(t)}function x(t,e){return x=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},x(t,e)}var T=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),O(this,e,[t])}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&x(t,e)}(e,t),n=e,(r=[{key:"open",value:function(t,n){var r=document.querySelector(this._popupSelector);this._image=r.querySelector("#popup__image"),this._description=r.querySelector(".popup__title"),this._image&&this._description?(this._image.src=t,this._image.alt=n,this._description.textContent=n,C(q(e.prototype),"open",this).call(this)):alert("Elemento de imagen o descripcion no encontradas")}}])&&L(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(h);function R(t){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},R(t)}function A(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,I(r.key),r)}}function I(t){var e=function(t,e){if("object"!=R(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=R(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==R(e)?e:e+""}var D=function(){return t=function t(e,n){var r=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=r,this._renderer=o,this._container=document.querySelector(n)},(e=[{key:"clear",value:function(){this._container.innerHTML=""}},{key:"addItem",value:function(t){this._container.append(t)}},{key:"renderer",value:function(){var t=this;this.clear(),this._items.forEach((function(e){var n=t._renderer(e);t.addItem(n)}))}}])&&A(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function B(t){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},B(t)}function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,U(r.key),r)}}function U(t){var e=function(t,e){if("object"!=B(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=B(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==B(e)?e:e+""}var H=function(){return t=function t(e){var n=e.nameSelector,r=e.jobSelector,o=e.avatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nameElement=document.querySelector(n),this._jobElement=document.querySelector(r),this._avatarElement=document.querySelector(o)},(e=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.textContent}}},{key:"setUserInfo",value:function(t){var e=t.name,n=t.job,r=t.avatar;this._nameElement.textContent=e,this._jobElement.textContent=n,this._avatarElement.src=r}}])&&N(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function G(t){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},G(t)}function V(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,F(r.key),r)}}function F(t){var e=function(t,e){if("object"!=G(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=G(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==G(e)?e:e+""}function J(t,e,n){return e=Y(e),function(t,e){if(e&&("object"===G(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,M()?Reflect.construct(e,n||[],Y(t).constructor):e.apply(t,n))}function M(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(M=function(){return!!t})()}function z(){return z="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Y(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},z.apply(this,arguments)}function Y(t){return Y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Y(t)}function K(t,e){return K=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},K(t,e)}var Q=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=J(this,e,[t])).submitCallback=n,r._form=document.querySelector(t).querySelector(".form"),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&K(t,e)}(e,t),n=e,(r=[{key:"open",value:function(t){z(Y(e.prototype),"open",this).call(this),this.submitCallback=t}},{key:"_getInputValues",value:function(){var t={};return this._form.querySelectorAll(".form__input").forEach((function(e){e.name&&(t[e.name]=e.value)})),t}},{key:"close",value:function(){this._form.reset(),z(Y(e.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var t=this;z(Y(e.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),t.submitCallback()}))}}])&&V(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(h);function W(t){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},W(t)}function X(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,Z(r.key),r)}}function Z(t){var e=function(t,e){if("object"!=W(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=W(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==W(e)?e:e+""}var $=new(function(){return t=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=e,this._token=n},(e=[{key:"getHeaders",value:function(){return{Authorization:this._token,"Content-Type":"application/json"}}},{key:"_getCheckResponse",value:function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(t){console.log("Error:",t)}))}},{key:"getInitialCard",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(t){console.log("Error:",t)}))}},{key:"updateUser",value:function(t,e){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this.getHeaders(),body:JSON.stringify({name:t,about:e})}).then(this._getCheckResponse).catch((function(t){console.log("Error: ",t)}))}},{key:"updateUserPhoto",value:function(t){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this.getHeaders(),body:JSON.stringify({avatar:t})}).then(this._getCheckResponse).catch((function(t){console.log("Error: ",t)}))}},{key:"addCard",value:function(t,e){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this.getHeaders(),body:JSON.stringify({name:t,link:e})}).then(this._getCheckResponse).catch((function(t){console.log("Error: ",t)}))}},{key:"linkCard",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"PUT",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(t){console.log("Error: ",t)}))}},{key:"deleteCard",value:function(t){return fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(t){console.log("Error: ",t)}))}},{key:"deleteCardLink",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"DELETE",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(t){console.log("Error: ",t)}))}}])&&X(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}())("https://around.nomoreparties.co/v1/web_es_11","678fbd92-e6e4-4044-b047-74ce334ffd4e"),tt=document.querySelectorAll(".form"),et=(document.querySelector(".popup"),document.querySelector(".buttons__item_index_profile")),nt=document.querySelector(".buttons__item_index_add-card"),rt=(document.querySelectorAll(".popup__overlay"),document.querySelectorAll(".form__error"),document.querySelector(".popup__close-button"),document.querySelector(".cards__element_item-imagen"),document.querySelectorAll(".cards__element_trast")),ot=document.querySelector(".buttons__edit"),it=document.querySelector(".buttons__image");function ct(t){return ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ct(t)}function at(){at=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function l(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,n){return t[e]=n}}function s(t,e,n,r){var i=e&&e.prototype instanceof v?e:v,c=Object.create(i.prototype),a=new q(r||[]);return o(c,"_invoke",{value:j(t,n,a)}),c}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=s;var p="suspendedStart",y="suspendedYield",h="executing",m="completed",d={};function v(){}function _(){}function b(){}var g={};l(g,c,(function(){return this}));var w=Object.getPrototypeOf,S=w&&w(w(x([])));S&&S!==n&&r.call(S,c)&&(g=S);var E=b.prototype=v.prototype=Object.create(g);function k(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(o,i,c,a){var u=f(t[o],t,i);if("throw"!==u.type){var l=u.arg,s=l.value;return s&&"object"==ct(s)&&r.call(s,"__await")?e.resolve(s.__await).then((function(t){n("next",t,c,a)}),(function(t){n("throw",t,c,a)})):e.resolve(s).then((function(t){l.value=t,c(l)}),(function(t){return n("throw",t,c,a)}))}a(u.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function j(e,n,r){var o=p;return function(i,c){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===i)throw c;return{value:t,done:!0}}for(r.method=i,r.arg=c;;){var a=r.delegate;if(a){var u=O(a,r);if(u){if(u===d)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var l=f(e,n,r);if("normal"===l.type){if(o=r.done?m:y,l.arg===d)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(o=m,r.method="throw",r.arg=l.arg)}}}function O(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,O(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),d;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,d;var c=i.arg;return c?c.done?(n[e.resultName]=c.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,d):c:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function q(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function x(e){if(e||""===e){var n=e[c];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(ct(e)+" is not iterable")}return _.prototype=b,o(E,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:_,configurable:!0}),_.displayName=l(b,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===_||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,l(t,u,"GeneratorFunction")),t.prototype=Object.create(E),t},e.awrap=function(t){return{__await:t}},k(L.prototype),l(L.prototype,a,(function(){return this})),e.AsyncIterator=L,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var c=new L(s(t,n,r,o),i);return e.isGeneratorFunction(n)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},k(E),l(E,u,"Generator"),l(E,c,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=x,q.prototype={constructor:q,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return a.type="throw",a.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var u=r.call(c,"catchLoc"),l=r.call(c,"finallyLoc");if(u&&l){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!l)throw Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:x(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),d}},e}function ut(t,e,n,r,o,i,c){try{var a=t[i](c),u=a.value}catch(t){return void n(t)}a.done?e(u):Promise.resolve(u).then(r,o)}function lt(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function c(t){ut(i,r,o,c,a,"next",t)}function a(t){ut(i,r,o,c,a,"throw",t)}c(void 0)}))}}document.addEventListener("DOMContentLoaded",lt(at().mark((function e(){var n,r,i,c,a,u,l,f,p;return at().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$.getUserInfo();case 2:n=e.sent,(r=new T(".popup_content-image")).setEventListeners(),i=function(t){r.open(t.link,t.name)},c=function(t){return new o({data:t,handleCardClick:i,handleDeleteClick:function(t,e){p.open((function(){$.deleteCard(t).then((function(){e(),p.close()})).catch((function(t){console.error(t)}))}))},handleAddLike:function(t){return $.linkCard(t)},handleRemoveLike:function(t){return $.deleteCardLink(t)}},"#newElement",n).createNewCard()},$.getInitialCard().then((function(t){new D({items:t,renderer:function(t){return c(t)}},".cards").renderer()})).catch((function(t){console.log(t)})),(a=new H({nameSelector:".buttons__name",jobSelector:".buttons__explorer",avatarSelector:".buttons__image"})).setUserInfo({name:n.name,job:n.about,avatar:n.avatar}),(u=new E(".popup_edit-profile",(function(e){return $.updateUser(e.name,e.activity).then((function(){a.setUserInfo({name:e.name,job:e.activity,avatar:n.avatar}),u.close(),t(tt)})).catch((function(t){console.log(t)}))}))).setEventListeners(),et.addEventListener("click",(function(){u.open()})),(l=new E(".popup_content-addcard",(function(e){return $.addCard(e.newplace,e.enlace).then((function(e){var n=c(e);document.querySelector(".cards").prepend(n),l.close(),t(tt)})).catch((function(t){console.log(t)}))}))).setEventListeners(),nt.addEventListener("click",(function(){l.open()})),(f=new E(".popup_avatar",(function(t){return $.updateUserPhoto(t.avatar).then((function(t){t&&t.avatar?it.src=t.avatar:console.log("La respueta a la API, no contine la propiedad avatar")})).catch((function(t){console.log("Error al actualizar la foto de perfil",t)}))}))).setEventListeners(),ot.addEventListener("click",(function(){f.open()})),(p=new Q(".popup_delete-card")).setEventListeners(),rt.forEach((function(t){t.addEventListener("click",(function(){p.open()}))})),new s(tt).enableValidation();case 24:case"end":return e.stop()}}),e)}))))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUssR0FDekMsS0FDd0JrSSxvQkFHeEJ6SCxHQUFjdEksaUJBQWlCLFNBQVMsV0FBUTBQLEVBQXdCTSxNQUFPLEtBSXpFTCxFQUFzQixJQUFJak0sRURsSFosaUJDa0gyQyxTQUFDZSxHQUM1RCxPQUFPaUMsRUFBSXVLLGdCQUFnQnhNLEVBQVM2QixRQUMvQmxHLE1BQUssU0FBQzhRLEdBQ0NBLEdBQVFBLEVBQUs1SyxPQUNibUMsR0FBWTNILElBQU1vUSxFQUFLNUssT0FFdkJ3QixRQUFRQyxJQUFJLHVEQUVwQixJQUNDSCxPQUFNLFNBQUFDLEdBQ0hDLFFBQVFDLElBQUksd0NBQXlDRixFQUN6RCxHQUNSLEtBQ29Ca0ksb0JBSXBCdkgsR0FBaUJ4SSxpQkFBaUIsU0FBUyxXQUFRMlAsRUFBb0JLLE1BQU8sS0FJeEVKLEVBQStCLElBQUl1QixFRHhJYix1QkN5SUNwQixvQkFDN0J4SCxHQUFjMUwsU0FBUSxTQUFDdUgsR0FDbkJBLEVBQUtwRSxpQkFBaUIsU0FBUyxXQUMzQjRQLEVBQTZCSSxNQUNqQyxHQUNKLElBS21CLElBQUkzTyxFQUFjQyxJQUMxQnFCLG1CQUFtQix5QkFBQWtOLEVBQUE1QixPQUFBLEdBQUFtQixFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF9hcm91bmQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF9hcm91bmQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0X2Fyb3VuZC8uL3NyYy9jb21wb25lbnRzL0FwaXMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfYXJvdW5kLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF9hcm91bmQvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRnVuY2nDs24gcXVlIG5vcyBwZXJtaXRlIHJlc2V0ZWFyIGxvcyBmb3JtdWxhcmlvcyB5IHRhbWJpw6luXHJcbmZ1bmN0aW9uIHJlc2V0Rm9ybXMoZm9ybXMpIHtcclxuICAgIGZvcm1zLmZvckVhY2goKGZvcm0pID0+IHtcclxuICAgICAgICAvLyBSZXNldGVhIGNhZGEgZW50cmFkYSBkZSBsb3MgZm9ybXVsYXJpb3MgcGFyYSBlbGltaW5hciBsb3MgZGF0b3MgcXVlIHF1ZWRhblxyXG4gICAgICAgIGZvcm0ucmVzZXQoKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9ucyA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLmZvcm1fX3N1Ym1pdCcpO1xyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucyhcImZvcm1fX3N1Ym1pdF9jb25maXJtYXRpb25cIikpIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYnV0dG9uX2luYWN0aXZlXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IHJlc2V0Rm9ybXMgfTsiLCJjbGFzcyBDYXJkIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZGF0YSwgaGFuZGxlQ2FyZENsaWNrLCBoYW5kbGVEZWxldGVDbGljaywgaGFuZGxlQWRkTGlrZSwgaGFuZGxlUmVtb3ZlTGlrZSwgfSwgY2FyZFNlbGVjdG9yLCB1c2VyKSB7XHJcbiAgICAgICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgICAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgIHRoaXMuX2lkID0gZGF0YS5faWQ7XHJcbiAgICAgICAgdGhpcy5fb3duZXIgPSBkYXRhLm93bmVyO1xyXG4gICAgICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICAgICAgdGhpcy5fbGlrZXNBcnJheSA9IGRhdGEubGlrZXMgfHwge307XHJcbiAgICAgICAgdGhpcy5fdXNlciA9IHVzZXI7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQWRkTGlrZSA9IGhhbmRsZUFkZExpa2U7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcclxuICAgICAgICB0aGlzLl9oYW5kbGVSZW1vdmVMaWtlID0gaGFuZGxlUmVtb3ZlTGlrZTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICAgICAgY29uc3QgbmV3RWxlbW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudFwiKVxyXG4gICAgICAgICAgICAuY2xvbmVOb2RlKFwidHJ1ZVwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld0VsZW1udDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy9Nw6l0b2RvIHF1ZSBkZXZ1ZWx2ZSB2ZXJkYWRlcm8gc2kgYWwgbWVub3MgdW4gZWxlbWVudG8gZGVsIGFycmF5LCBjdW1wbGUgY29uIHVuYSBjb25kaWNpb25hLCBsYSBjdWFsIGVzIHZlciBzaSBsYSBpZGVudGlkYWQgZGVsIHVzdWFyaW8gc2UgZW5jdWVudHJhIGVuIGVsIGFycmF5LCBzaSBzZSBlbmN1ZW50cmEgbm9zIGRhcsOhIHVuIHRydWUsIGRlIGxvIGNvbnRyYXJpbyB1biBmYWxzZS5cclxuICAgIF9pc0xpa2VkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saWtlc0FycmF5LnNvbWUobGlrZSA9PiBsaWtlLl9pZCA9PT0gdGhpcy5fdXNlci5faWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vTcOpdG9kbyBxdWUgY29tcGFyYSBzaSBlbCBJRCBkZWwgdXN1YXJpbyBvcHRlbmlkbyBkZSBsb3MgZGF0b3MgZGUgbGEgcGV0aWNpb24gaGVjaGEgZW4gbGEgY2xhc2UgQVBJIHkgY2FyZ2FkYXMgcG9yIGRlZmVjdG8sIGVzIGVsIG1pc21vIElEIHF1ZSBzZSBlbmN1ZW50cmEgZW4gZWwgYXJyYXkgcXVlIHBhc2Ftb3MgY29tbyBwYXLDoW1ldHJvIGEgbGEgY2xhc2UgQ2FyZHMsIGRldm9sdmVyw6EgdHJ1ZSBzaSBlcyBpZ3VhbCBkZSBsbyBjb250cmFyaW8gZGV2b2x2ZXLDoSBmYWxzZS5cclxuICAgIF9pc1VzZXJPd25lcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlci5faWQgPT09IHRoaXMuX293bmVyLl9pZDtcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcXVlIGFjdHVhbGl6YSBlbCBjb250YWRvciBkZSBsaWtlLCBkZXBlbmRpZW5kbyBkZSBsYSBjYW50aWRhZCBxdWUgdGVuZ2EgY2FkYSB1bmEgZGUgbGFzIHRhcmpldGFzXHJcbiAgICBfdXBkYXRlTGlrZVN0YXR1cygpIHtcclxuICAgICAgICBjb25zdCBsaWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19lbGVtZW50X2l0ZW1JbWFnZVwiKTtcclxuICAgICAgICBjb25zdCBsaWtlQ291bnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY291bnRsaWtlXCIpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNMaWtlZCgpKSB7XHJcbiAgICAgICAgICAgIGxpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRzX19saWtlX2FjdGl2ZVwiKTsgLy9TaSBlcyB2ZXJkYWRlcm8gYWN0aXZhIGVsIGJvdG9uIGRlIGxpa2VzXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZHNfX2xpa2VfYWN0aXZlXCIpOyAvL0RlIGxvIGNvbnRyYXJpbyBsbyBkZXNhY3RpdmFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpa2VDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzQXJyYXkubGVuZ3RoOyAvL0VuIGVsIGNvbnRhZG9yIGFsbWFjZW5hbW9zIGxhIGxvbmdpdHVkIGRlbCBhcnJheSBkZSBsaWtlcy5cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIF9oYW5kbGVMaWtlQW5kRGlzbGlrZSgpIHtcclxuICAgICAgICAvL0EgbGEgdGFyamV0YSBjcmVhZGEgc2UgbGUgZGEgZWwgRXZlbnRvIENsaWNrIHF1ZSBhY3RpdmEgbyBkZXNhY3RpdmEgZWwgYm90b24gZGUgbWUgZ3VzdGEgc2kgZWwgdXN1YXJpbyBsbyBzZWxlY2Npb25hIHkgYWRlbWFzIGFjdHVhbGl6YSBlbCBjb250YWRvciBwYXJhIG1vc3RyYXIgbGEgY2FudGlkYWQgZGUgbGlrZSBxdWUgdGllbmUgbGEgdGFyamV0YVxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudF9pdGVtSW1hZ2VcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsaWtlQnV0dG9uID0gZXZlbnQudGFyZ2V0OyAvL0d1YXJkYSBlbCBib3RvbiBxdWUgYWN0aXbDsyBlbCBldmVudG8uXHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50TGlrZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb3VudGxpa2VcIik7IC8vR3VhZGEgZWwgY29udGFkb3IgbGlrZS5cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNMaWtlZCgpKSB7IC8vU2kgZXN0byBubyBlcyB2ZXJkYWRlcm8gKG9zZWEgc2kgZXN0YSBwZXJzb25hIG5vIGhhIGRhZG8gbGlrZSkgZWplY3V0YSBsYSBzaWd1aWVudGUgZnVuY2nDs25cclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUFkZExpa2UodGhpcy5faWQpIC8vRW52aWEgdW5hIHBldGljacOzbiBkZSBhY3R1YWxpemFjacOzbiBkZSBsb3MgbGlrZXMgZW4gZWwgc2Vydmlkb3IgY29uIGVzdGEgSUQgZGUgdXN1YXJpb1xyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGNhcmRVcGRhdGVkID0+IHsgLy9VbmEgdmV6IHF1ZSBsYSBwcm9tZXNhIHNlIGhheWEgY3VtcGxpZG8gb3NlYSBxdWUgbWUgZGV2dWVsdmEgbGEgdGFyamV0YSBhY3R1YWxpemFkYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9saWtlc0FycmF5ID0gY2FyZFVwZGF0ZWQubGlrZXM7IC8vQWxtYWNlbmEgYSBlc3RlIHVzdWFyaW8gZW4gZWwgYXJyYXkgbGlrZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRzX19saWtlX2FjdGl2ZVwiKSAvL0FjdGl2YSBlbCBjb3Jhem9uIGRlIG1lIGd1c3RhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50TGlrZS50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzQXJyYXkubGVuZ3RoOyAvL0FjdHVhbGl6YSBlbCBjb250YWRvciB5IG11ZXN0cmEgbGEgY2FudGlhZCBkZSBsaWtlcy5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlUmVtb3ZlTGlrZSh0aGlzLl9pZCkvL1NpIGVzdG8gZXMgdmVyZGFkZXJvIChvc2VhIHNpIGVzdGUgdXN1YXJpbyB5YSBkaW8gbGlrZSkgZWplY3V0YSBsYSBzaWd1aWVudGUgZnVuY2nDs25cclxuICAgICAgICAgICAgICAgICAgICAudGhlbihjYXJkVXBkYXRlZCA9PiB7IC8vVW5hIHZleiBxdWUgbGEgcHJvbWVzYSBzZSBoYWNhIGN1bXBsaWRvIHkgbWUgZGV2dWVsdmEgbGEgdGFyamV0YSBhY3R1YWxpemFkYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9saWtlc0FycmF5ID0gY2FyZFVwZGF0ZWQubGlrZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImNhcmRzX19saWtlX2FjdGl2ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudExpa2UudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlc0FycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2hhbmRsZVJlbW92ZSgpIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2VsZW1lbnRfdHJhc3RcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sodGhpcy5faWQsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3Nob3dDYXJkKCkge1xyXG4gICAgICAgIC8vQSBsYSB0YXJqZXRhIGNyZWFkYSBzZSBsZSBkYSBlbCBldmVudG8gY2xpY2sgcXVlIG5vcyBwZXJtaXRlIG1vc3RyYXIgbGEgdGFyamV0YSBlbiBsYSBwYW50YWxsYSB1bmEgdmV6IHF1ZSBlbCB1c3VhcmlvIGxhIHNlbGVjY2lvbmVcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2VsZW1lbnRfaW1hZ2VcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHsgbGluazogdGhpcy5fbGluaywgbmFtZTogdGhpcy5fbmFtZSB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUxpa2VBbmREaXNsaWtlKCk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlUmVtb3ZlKCk7XHJcbiAgICAgICAgdGhpcy5fc2hvd0NhcmQoKTtcclxuICAgICAgICB0aGlzLl9pbWFnZW5FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayh7IGxpbms6IHRoaXMuX2xpbmssIG5hbWU6IHRoaXMuX25hbWUgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9VdGlsaXphIGxhIHBsYW50aWxsYSBjb2xvY2FkYSBlbiBodG1sIHBhcmEgY3JlYXIgbGEgbnVldmEgdGFyamV0YSBpbmdyZXNhZGEgcG9yIGVsIHVzdWFyaW9cclxuICAgIGNyZWF0ZU5ld0NhcmQoKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19lbGVtZW50X2l0ZW1UaXRsZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VuRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudF9pbWFnZVwiKTtcclxuICAgICAgICB0aGlzLl9pbWFnZW5FbGVtZW50LnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VuRWxlbWVudC5hbHQgPSB0aGlzLl9uYW1lO1xyXG4gICAgICAgIGlmICghdGhpcy5faXNVc2VyT3duZXIoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2VsZW1lbnRfdHJhc3RcIikuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91cGRhdGVMaWtlU3RhdHVzKClcclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhcmQ7XHJcbiIsImNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoYWxsRm9ybXMpIHtcclxuICAgICAgICB0aGlzLl9hbGxGb3JtcyA9IGFsbEZvcm1zO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vRnVuY2nDs24gcGFyYSBtb3N0cmFyIGVsIG1lbnNhamUgZGUgZXJyb3IgY3VhbmRvIGVsIHVzdWFyaW8gaW50cm9kdWNlIGRhdG9zIGVycm9uZW9zIGVuIGxvcyBjYW1wb3NcclxuICAgIF9zaG93SW5wdXRFcnJvciA9IChpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9XHJcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC5mb3JtX19lcnJvcmApO1xyXG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZm9ybV9faW5wdXRfdHlwZV9lcnJvclwiKTtcclxuICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmb3JtX19pbnB1dC1lcnJvcl9hY3RpdmVcIik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEZ1bmNpw7NuIHBhcmEgb2N1bHRhciBlbCBtZW5zYWplIGRlIGVycm9yIGN1YW5kbyBlbCB1c3VhcmlvIHBvbmdhIHRvZG9zIGxvcyBkYXRvcyByZXF1ZXJpZG9zXHJcbiAgICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID1cclxuICAgICAgICAgICAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihgLmZvcm1fX2Vycm9yYCk7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJmb3JtX19pbnB1dF90eXBlX2Vycm9yXCIpO1xyXG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZm9ybV9faW5wdXQtZXJyb3JfYWN0aXZlXCIpO1xyXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vRXN0YSBmdW5jacOzbiByZXZpc2Egc2kgZWwgaW5wdXQgZXMgdsOhbGlkbyBvIG5vIHkgZGVwZW5kaWVuZG8gZGUgZXN0byBhY3RpdmEgbyBkZXNhY3RpdmEgZWwgYm90b24gZ3VhcmRhclxyXG4gICAgX2NoZWNrSW5wdXRWYWxpZGl0eSA9IChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vRXN0YSBmdW5jacOzbiBkZXZ1ZWx2ZSB0cnVlIHNpIGFsbWVub3MgaGF5IHVuIGlucHV0IG5vIHbDoWxpZG8gZW4gZWwgYXJyYXlcclxuICAgIF9oYXNJbnZhbGlkSW5wdXQgPSAoaW5wdXRMaXN0KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGlucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vRXN0YSBmdW5jacOzbiBub3MgdmVyaWZpY2Egc2kgYWxndW5vIGRlIGxvcyBjYW1wb3MgZXMgdsOhbGlkbyB5IGRlcGVuZGllbmRvIGRlIGVzdG8gYWN0aXZhIG8gZGVzYWN0aXZhIGVsIGJvdG9uIGd1YXJkYXJcclxuICAgIF90b2dnbGVCdXR0b25TdGF0ZSA9IChpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KGlucHV0TGlzdCkpIHtcclxuICAgICAgICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYnV0dG9uX2luYWN0aXZlXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImJ1dHRvbl9pbmFjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vRXN0YSBmdW5jacOzbiBjcmVhIHVuYSBsaXN0YSBkZSB0b2RvcyBsb3MgaW5wdXMgeSBkZSB0b2RvcyBsb3MgYm90b25lcy4gTHVlZ28gaXRlcmEgc29icmUgZXN0b3MgY2FtcG9zIGxsYW1hbmRvIGEgbGFzIGZ1bmNpb25lcyBhbnRlcmlvcmVzXHJcblxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKGZvcm1FbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX2lucHV0XCIpKTtcclxuICAgICAgICBjb25zdCBidXR0b25FbGVtZW50ID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtX19zdWJtaXRcIik7XHJcbiAgICAgICAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9Fc3RhIGZ1bmNpw7NuIGxsYW1hIGEgbGEgYW50ZXJpb3JcclxuICAgIGVuYWJsZVZhbGlkYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fYWxsRm9ybXMuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkc2V0TGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQuZm9ybXMpO1xyXG4gICAgICAgICAgICBmaWVsZHNldExpc3QuZm9yRWFjaCgoZmllbGRzZXQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKGZpZWxkc2V0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdG9yO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICAgICAgLy9SZWNpYmUgdW4gc2VsZWN0b3IgcG9wdXBcclxuICAgICAgICB0aGlzLl9wb3B1cFNlbGVjdG9yID0gcG9wdXBTZWxlY3RvcjtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3BvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9idXR0b25Qb3B1cCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX3N1Ym1pdFwiKVxyXG4gICAgfVxyXG5cclxuICAgIC8vTcOpdG9kbyBww7pibGljbyBwYXJhIGFicmlyIGVsIHBvcHVwIG8gbGEgaW1hZ2VuIHNlbGVjY2lvbmFkYVxyXG4gICAgb3BlbigpIHtcclxuICAgICAgICAvL0Ficmlyw6EgZWwgcG9wdXBcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBvcHVwX3Nob3dcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vTcOpdG9kbyBww7pibGljbyBwYXJhIGNlcnJhciBlbCBwb3B1cCBvIGxhIGltYWdlbiBzZWxlY2Npb25hZGFcclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIC8vQ2VycmFyIGVsIHBvcHVwXHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9zaG93XCIpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcHJpdmFkbyBwYXJhIGNlcnJhciBlbCBwb3B1cCBhbCBwdWxzYXIgbGEgdGVjbGEgRXNjXHJcbiAgICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy9Nw6l0b2RvIHDDumJsaWNvIHBhcmEgYWdyZWdhciBldmVudG9zIGRlIGNsaWMgYWwgaWNvbm8gY2VycmFyIHkgZWwgw6FyZWEgc29tYnJlYWRhXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBcIi5wb3B1cF9fY2xvc2UtYnV0dG9uXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGFsbE92ZXJsYXkgPVxyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wb3B1cF9fb3ZlcmxheVwiKTtcclxuXHJcbiAgICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhbGxPdmVybGF5LmZvckVhY2goKG92ZXJsYXkpID0+IHtcclxuICAgICAgICAgICAgLy9DZXJyYXIgbGEgaW1hZ2VuIHBvcHVwIGFsIGRhciBjbGljIGVuIGVsIE92ZXJsYXlcclxuICAgICAgICAgICAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpOyAvL0NlcnJhciBhbCBwcmVzaW9uYXIgbGEgdGVjbGEgRXNjXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvciwgc3VibWlDYWxsYmFjaykge1xyXG4gICAgICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHN1Ym1pQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3RvcikucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9fc3VibWl0XCIpOyAvL1NlbGVjdG9yIGRlbCBib3RvbiBzdWJtaXRcclxuICAgICAgICB0aGlzLl9pbml0aWFsU3VibWl0QnV0dG9uVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbnMudmFsdWU7IC8vVGV4dG8gaW5pY2lhbCBkZWwgYm90b25cclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcXVlIG5vcyByZXRvcm5hIHRvZG9zIGxvcyB2YWxvcmVzIGRlIGxvcyBjYW1wb3MgZGUgZW50cmFkYSBkZSBsb3MgZm9ybXVsYXJpb3MgcGFyYSBwb2RlciB0cmFiYWphciBjb24gZWxsb3MuXHJcbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgLy9tw6l0b2RvIHBhcmEgYWxtYWNlbmFyIGxvcyB2YWxvcmVzIGRlIHRvZG9zIGxvcyBjYW1wb3MgZGUgZW50cmFkYSBkZWwgZm9ybXVsYXJpbyBxdWUgc2UgcGFzYVxyXG4gICAgICAgIGNvbnN0IHZhbHVlc0ltcHV0ID0ge307IC8vT2JqZXRvIHBhcmEgYWxtYWNlbmFyIHRvZG9zIGxvcyB2YWxvcmVzIGRlIGxvcyBjYW1wb3MgZGUgZW50cmFkYVxyXG4gICAgICAgIGNvbnN0IGFsbElucHV0ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX2lucHV0XCIpOyAvL1NlbGVjY2lvbmEgdG9kb3MgbG9zIGNhbXBvcyBkZSBlbnRyYWRhIGRlIGVsIGZvcm11bGFyaW9cclxuXHJcbiAgICAgICAgYWxsSW5wdXQuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5uYW1lKSB7IC8vU2kgZXN0byBlcyB2ZXJkYWRlcm8gZW50b25jZXNcclxuICAgICAgICAgICAgICAgIHZhbHVlc0ltcHV0W2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlOyAvL0FsbWFjZW5hIGVuIHZhbHVlc0ltcHV0IGRlIGxvcyDDrW5kaWNlcyBpdGVtLm5hbWUgc29sbyBsb3MgdmFsb3JlcyBkZSBpdGVtLnZhbHVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdmFsdWVzSW1wdXQ7IC8vRGV2dcOpbHZlbWUgdG9kbyBsb3MgdmFsb3JlcyBhbGFtY2VuYWRvcyBlbiB2YWx1ZXNJbXB1dFxyXG4gICAgfVxyXG5cclxuICAgIC8vTcOpdG9kbyBwYXJhIGNlcnJhciBlbCBmb3JtdWxhcmlvXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7IC8vIFJlaW5pY2lhciBlbCBmb3JtdWxhcmlvIGFsIGNlcnJhciBlbCBwb3B1cFxyXG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4gey8vQWwgbW9tZW50byBkZSBwcmVzaW9uYXIgZWwgYm90b24gZGUgZXN0ZSBmb3JtdWxhcmlvIGhhcyBsb3Mgc2lndWllbnRlXHJcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOy8vRXZpdGEgZWwgZW52aW8gcG9yIGRlZmVjdG8gZGVsIGZvcm11bGFyaW8geSBhIGNhbWJpbyBkZSBlc28gaGF6IGVzdG9cclxuICAgICAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9ucy52YWx1ZSA9IFwiR3VhcmRhbmRvLi4uXCI7IC8vQ2FtYmlhciBlbCB0ZXh0byBkZWwgYm90b24gYSBndWFyZGFuZG8uXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKTsgLy9BbG1hY2VuYSBlbiBlc3RhIHZhcmlhYmxlIHRvZG9zIGxvcyB2YWxvcmVzIHF1ZSByZXRvcm5hIGVzdGEgZnVuY2nDs25cclxuICAgICAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uKGZvcm1EYXRhKS5maW5hbGx5KCgpID0+IHsgLy9VbmEgdmV6IGZpbmFsaXphZGEgbGEgcGV0aWNpw7NuIGRlIGRhdG9zXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25zLnZhbHVlID0gdGhpcy5faW5pdGlhbFN1Ym1pdEJ1dHRvblRleHQgLy9CdWVsdmUgZWwgYm90b24gYSBzdSBlc3RhZG8gbm9ybWFsLlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7IC8vQ2llcnJhIGVsIGZvcm11bGFyaW9cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2xvc2VCdXRvblNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoY2xvc2VCdXR0b24pIHtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7Ly9Fc3RhIGNsYXNlIGxvIHF1ZSBub3MgcGVybWl0aXLDoSBlcyBxdWUgYWwgbW9tZW50byBkZSBkYXJsZSBjbGljayBhIHVuYSBkZSBsYXMgaW3DoWdlbmVzIGRlIG51ZXN0cmEgcMOhZ2luYSwgZXN0ZSBzZSBtb3N0cmFyw6EgZW4gbGEgdmVudGFuYSwgeSBhZGVtYXMgdGVuZHLDoSB1biBkZXNjcmlwY2nDs24gY29ydGEgZW4gbGEgcGFydGUgaW5mZXJpb3IgZGUgbGEgbWlzdG1hLlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKGxpbmssIG5hbWUpIHtcclxuICAgICAgICBjb25zdCBwb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3BvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlID0gcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcG9wdXBfX2ltYWdlXCIpO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX3RpdGxlXCIpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faW1hZ2UgJiYgdGhpcy5fZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5faW1hZ2Uuc3JjID0gbGluaztcclxuICAgICAgICAgICAgdGhpcy5faW1hZ2UuYWx0ID0gbmFtZTtcclxuICAgICAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYWxlcnQoXCJFbGVtZW50byBkZSBpbWFnZW4gbyBkZXNjcmlwY2lvbiBubyBlbmNvbnRyYWRhc1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7ICAgIC8vUmVjaWJlIGVsIG1hcmNhZG8gYXRyYXZleiBkZSB1bmEgZnVuY2nDsyBkZSBjYWxsYmFjayB5IGxvIGlzZXJ0YSBlbiBlbCBjb250ZW5lZG9yLlxyXG4gICAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY2FyZFNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5faXRlbXMgPSBpdGVtczsgLy9BcnJheSBkZSBkYXRvc1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7IC8vRnVuY2nDs24gcmVzcG9zYWJsZSBkZSBjcmVhciB5IG1vc3RyYXIgbG9zIGRhdG9zIGVuIGxhIHDDoWdpbmFcclxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNhcmRTZWxlY3Rvcik7IC8vU2VsZWNjaW9uYSBsYSBjbGFzZSBkb25kZSB2YW4gbG9zIGVsZW1lbnRvIGRlIGxhIHRhcmpldGFcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgICAgICAvL1RvbWEgdW4gZWxlbWVudG8gZGVsIERPTSB5IGxvIGFncmVnYSBhbCBjb250ZW5lclxyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQoZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyZXIoKSB7XHJcbiAgICAgICAgLy9SZW5kZXJpemEgY2FkYSB1bm8gZGUgbG9zIGVsZW1lbnRvcyBlbiBsYSBww6FnaW5hXHJcbiAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FyZCA9IHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmFkZEl0ZW0oY2FyZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8geyAgICAvL0VzIGNhcGF6IGRlIHByZXNlbnRhciBpbmZvcm1hY2nDs24gc29icmUgZWwgdXN1YXJpbyBlbiBsYSBww6FnaW5hXHJcbiAgICBjb25zdHJ1Y3Rvcih7IG5hbWVTZWxlY3Rvciwgam9iU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yIH0pIHtcclxuICAgICAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9qb2JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2JTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE3DqXRvZG8gcMO6YmxpY28gcGFyYSBvYnRlbmVyIGluZm9ybWFjacOzbiBzb2JyZSBlbCB1c3VhcmlvXHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgICAgICAgam9iOiB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgICAgICAgICBhdmF0YXI6IHRoaXMuX2F2YXRhckVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNw6l0b2RvIHDDumJsaWNvIHBhcmEgZXN0YWJsZWNlciBpbmZvcm1hY2nDs24gc29icmUgZWwgdXN1YXJpb1xyXG4gICAgc2V0VXNlckluZm8oeyBuYW1lLCBqb2IsIGF2YXRhciB9KSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBqb2I7XHJcbiAgICAgICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBhdmF0YXI7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhDb25maXJtYXRpb25zIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvciwgc3VibWl0Q2FsbGJhY2spIHtcclxuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLnN1Ym1pdENhbGxiYWNrID0gc3VibWl0Q2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3RvcikucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oc3VibWl0Q2FsbGJhY2spIHtcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy5zdWJtaXRDYWxsYmFjayA9IHN1Ym1pdENhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICAvL23DqXRvZG8gcGFyYSBhbG1hY2VuYXIgbG9zIHZhbG9yZXMgZGUgdG9kb3MgbG9zIGNhbXBvcyBkZSBlbnRyYWRhXHJcbiAgICAgICAgY29uc3QgdmFsdWVzSW1wdXQgPSB7fTsgLy9PYmpldG8gcGFyYSBhbG1hY2VuYXIgdG9kb3MgbG9zIHZhbG9yZXMgZGUgbG9zIGNhbXBvcyBkZSBlbnRyYWRhXHJcbiAgICAgICAgY29uc3QgYWxsSW5wdXQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9ybV9faW5wdXRcIik7XHJcblxyXG4gICAgICAgIGFsbElucHV0LmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzSW1wdXRbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdmFsdWVzSW1wdXQ7XHJcbiAgICB9XHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7IC8vIFJlaW5pY2lhciBlbCBmb3JtdWxhcmlvIGFsIGNlcnJhciBlbCBwb3B1cFxyXG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXRDYWxsYmFjaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiLyoqXHJcbiBUT0tFTiA6IDY3OGZiZDkyLWU2ZTQtNDA0NC1iMDQ3LTc0Y2UzMzRmZmQ0ZVxyXG4gR1JVUE86IHdlYl9lc18xMVxyXG4gVVJMIDogaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS93ZWJfZXNfMTEvY2FyZHNcclxuICovXHJcblxyXG5jbGFzcyBBcGkge1xyXG4gICAgY29uc3RydWN0b3IodXJsLCB0b2tlbikge1xyXG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcclxuICAgICAgICB0aGlzLl90b2tlbiA9IHRva2VuO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRIZWFkZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdGhpcy5fdG9rZW4sXHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfZ2V0Q2hlY2tSZXNwb25zZShyZXMpIHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9NZXRvZG9zIHBhcmEgY2FyZ2FyIGxvcyBkYXRvcyBkZWwgdXN1YXJpbyBhbCBjYXJnYXIgbGEgcMOhZ2luYSBlbiBlc3RlIGNhc28gZWwgdXN1YXJpbyBzb3kgeW8uXHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZWAsIC8vUmFsaXphIGxhIHBldGljacOzbiBhbCBzZXJ2aWRvciBkZSBsYSBpbmZvcm1hY2nDs24gZGVsIHVzdWFyaW9cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2dldENoZWNrUmVzcG9uc2UpIC8vQ29udmllcnRlIGxvcyBkYXRvcyBlbiBmb3JtYXRvIEpTT05cclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvcjonLCBlcnIpOyAvL1NpIGxhIHJlc3B1ZXN0YSBubyBlcyBjb3JyZWN0YSBzZSBpbXByaW1pcsOhIHVuIG1lbnNhamUgZGUgZXJyb3JcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvL01ldG9kb3MgcGFyYSBvYnRlbmVyIGxhcyB0YXJqZXRhcyBkZWwgc2Vydmlkb3IgeSBjYXJnYXJsYXMgZW4gbGEgcMOhZ2luYVxyXG4gICAgZ2V0SW5pdGlhbENhcmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCAvL1JlYWxpemEgbGEgcGV0aWNpw7NuIGFsIHNlcnZpZG9yIGRlIGxhcyB0YXJqZXRhcyBwcmluY2lwYWxlcyBwYXJhIGNhcmdhcmxhc1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmdldEhlYWRlcnMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgICAudGhlbih0aGlzLl9nZXRDaGVja1Jlc3BvbnNlKSAvL0NvbnZpZXJ0ZSBsb3MgZGF0b3MgcmVjaXZpZG9zIGVuIGZvcm1hdG8gSlNPTlxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOicsIGVycikgLy9TaSBsYSByZXNwdWVzdGEgZXMgaW5jb3JyZWN0YSBpbXByaW1pcsOhIHVuIG1lbnNhamUgZGUgZXJyb3JcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcGFyYSBlZGl0YXIgbGEgaW5mb3JtYWNpw7NuIGRlbCB1c3VhcmlvIGRlc2RlIGVsIHNlcnZpZG9yXHJcbiAgICB1cGRhdGVVc2VyKG5hbWUsIGFib3V0KSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7IC8vUmVhbGl6YSB1bmEgcGV0aWNpw7NuIGRlIGNhbWJpbyBkZSBkYXRvcyBkZWwgcGVyZmlsIGRlIHVzdWFyaW9cclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG5hbWUsIGFib3V0IH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZ2V0Q2hlY2tSZXNwb25zZSkgLy9Db252aWVydGUgbG9zIGRhdG9zIHJlY2liaW9zIGVuIGZvcm1hdG8gSlNPTlxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIsIGVycikgLy9TaSBhbGdvIHNhbGUgbWFsIG1lIG1vc3RyYXLDoSB1biBtZW5zYWplIGRlIGVycm9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vTcOpdG9kbyBwYXJhIGFjdHVhbGl6YXIgbGEgZm90byBkZWwgcGVyZmlsIGRlIHVzdWFyaW9cclxuICAgIHVwZGF0ZVVzZXJQaG90byhsaW5rKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWUvYXZhdGFyYCwgeyAvL1JlYWxpemEgdW5hIHBldGljacOzbiBkZSBjYW1iaW8gZGUgbGEgZm90byBkZSBwZXJmaWwgZGUgdXN1YXJpb1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGF2YXRhcjogbGluayB9KSxcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dldENoZWNrUmVzcG9uc2UpIC8vQ29udmlldGUgbG9zIGRhdG9zIGVuIGZvcm1hdG8gSlNPTlxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnIpIC8vU2kgc2UgcHJlc2VudGEgdW4gZXJyb3Igbm9zIG1vc3RyYXLDoSB1biBtZW5zYWplIGVuIGxhIGNvbnNvbGEgY29uIGVsIGVycm9yXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy9Nw6l0b2RvIHBhcmEgYcOxYWRpciB1bmEgbnVldmEgdGFyZ2V0YSBhbCBzZXJ2aWRvclxyXG4gICAgYWRkQ2FyZChuYW1lLCBsaW5rKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7IC8vUmVhbGl6YSB1bmEgcGV0aWNpw7NuIHBhcmEgYWdyZWdhciB1bmEgdnVldmEgdGFyamV0YSBhbCBzZXJ2aWRvclxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmdldEhlYWRlcnMoKSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBuYW1lLCBsaW5rIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4odGhpcy5fZ2V0Q2hlY2tSZXNwb25zZSkgLy9Db252aWVydGUgbG9zIGRhdG9zIGVuIGZvcm1hdG8gSlNPTlxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIsIGVycikgLy8gU2kgYWxnbyBzYWxlIG1hbCBtZSBtb3N0cmFyw6EgdW4gbWVuc2FqZSBkZSBlcnJvclxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcGFyYSBtb3N0cmFyIGxhIGNhbnRpZGFkIGRlIGxpa2UgZGUgY2FkYSB0YXJqZXRhIGRlcGVuZGllbmRvIGRlIHN1IGlkZW50aWRhZCBkZSB1c3VhcmlvXHJcbiAgICBsaW5rQ2FyZChjYXJkSWQpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkcy9saWtlcy8ke2NhcmRJZH1gLCB7IC8vU2UgcmVhbGl6YSB1bmEgcGV0aWNpw7NuIHBhcmEgYWdyZWdhciB1biBsaWtlXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2dldENoZWNrUmVzcG9uc2UpLy9Db3ZpZXJ0ZSBsb3MgZGF0b3MgZW4gZm9ybWF0byBKU09OXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyKSAvL1NpIGFsZ28gc2FsZSBtYWwgc2UgbW9zdHJhcsOhIHVuIG1lbnNhamUgZGUgZXJyb3JcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcGFyYSBlbGltaW5hciB1bmEgdGFyamV0YSBzZWxlY2Npb25hZGFcclxuICAgIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtjYXJkSWR9YCwgeyAvL1NlIHJlYWxpemEgdW5hIHBldGljacOzbiBwYXJhIGVsaW1pYXIgdW5hIHRhcmpldGEgc2VsZWNjaW9uYWRhXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2dldENoZWNrUmVzcG9uc2UpLy9Db3ZpZXJ0ZSBsb3MgZGF0b3MgZW4gZm9ybWF0byBKU09OXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyKSAvL1NpIGFsZ28gc2FsZSBtYWwgc2UgbW9zdHJhcsOhIHVuIG1lbnNhamUgZGUgZXJyb3JcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvL03DqXRvZG8gcGFyYSBlbGltaW5hciB1biBsaWtlIGRlIHVuYSB0YXJqZXRhIHNlbGVjY2lvbmFkYVxyXG4gICAgZGVsZXRlQ2FyZExpbmsoY2FyZElkKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwgeyAvL1NlIHJlYWxpemEgdW5hIHBldGljacOzbiBwYXJhIGVsaW1pYXIgdW5hIHRhcmpldGEgc2VsZWNjaW9uYWRhXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycygpLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHRoaXMuX2dldENoZWNrUmVzcG9uc2UpLy9Db3ZpZXJ0ZSBsb3MgZGF0b3MgZW4gZm9ybWF0byBKU09OXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiwgZXJyKSAvL1NpIGFsZ28gc2FsZSBtYWwgc2UgbW9zdHJhcsOhIHVuIG1lbnNhamUgZGUgZXJyb3JcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBhcGkgPSBuZXcgQXBpKCdodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL3dlYl9lc18xMScsIFwiNjc4ZmJkOTItZTZlNC00MDQ0LWIwNDctNzRjZTMzNGZmZDRlXCIpOyIsImNvbnN0IGFsbEZvcm1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5mb3JtXCIpO1xyXG5jb25zdCBwb3B1cEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwXCIpO1xyXG5jb25zdCBidXR0b25FZGlkUHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnV0dG9uc19faXRlbV9pbmRleF9wcm9maWxlXCIpO1xyXG5jb25zdCBidXR0b25BZGRDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5idXR0b25zX19pdGVtX2luZGV4X2FkZC1jYXJkXCIpO1xyXG5jb25zdCBhbGxPdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wb3B1cF9fb3ZlcmxheVwiKTtcclxuY29uc3QgYWxsSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX2Vycm9yXCIpO1xyXG5jb25zdCBwb3B1cFByb2ZpbGUgPSBcIi5wb3B1cF9lZGl0LXByb2ZpbGVcIjtcclxuY29uc3QgcG9wdXBBZGRDYXJkID0gXCIucG9wdXBfY29udGVudC1hZGRjYXJkXCI7XHJcbmNvbnN0IHBvcHVwSW1hZ2UgPSBcIi5wb3B1cF9jb250ZW50LWltYWdlXCI7XHJcbmNvbnN0IHByb3B1cERlbGV0ZUNvZmlybWF0aW9uID0gXCIucG9wdXBfZGVsZXRlLWNhcmRcIjtcclxuY29uc3QgcG9wdXBFZGl0QXZhdGFyID0gXCIucG9wdXBfYXZhdGFyXCI7XHJcbmNvbnN0IGJ1dHRvbkNsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fY2xvc2UtYnV0dG9uXCIpO1xyXG5jb25zdCBidXR0b25MaWtlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudF9pdGVtLWltYWdlblwiKTtcclxuY29uc3QgYnV0dG9uUmVjeWNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2FyZHNfX2VsZW1lbnRfdHJhc3RcIik7IC8vQm90w7NuIHBhcmEgZGFybGUgY2xpY2sgeSBzZSBhYnJhIGxhIHZlbnRhbmEgZGUgY29uZmlybWFyIHNpIHF1aWVyZSBlbGltaW5hciBvIG5vXHJcbmNvbnN0IGJ1dHRvbkVkaXRBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1dHRvbnNfX2VkaXRcIik7IC8vQm90w7NuIHBhcmEgYWwgZGFybGUgY2xpY2sgc2UgYWJyYSBlbCBmb3JtdWxhcmlvIHBhcmEgYWN0dWFsaXphciBlbCBhdmF0YXJcclxuY29uc3QgYXZhdGFyUGhvdG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1dHRvbnNfX2ltYWdlXCIpOyAvL0FxdcOtIGVzIGRvbmRlIHNlIHZhIGEgZ3VhcmRhciBsYSBkaXJlY2Npb24gZGVsIG51ZXZvIGF2YXRhclxyXG5jb25zdCBjYXJkVGVtcGxhdGUgPSBcIiNuZXdFbGVtZW50XCI7XHJcblxyXG5leHBvcnQge1xyXG4gICAgcG9wdXBJbWFnZSxcclxuICAgIHBvcHVwUHJvZmlsZSxcclxuICAgIGFsbEZvcm1zLFxyXG4gICAgcG9wdXBGb3JtLFxyXG4gICAgYnV0dG9uRWRpZFByb2ZpbGUsXHJcbiAgICBidXR0b25BZGRDYXJkLFxyXG4gICAgYWxsT3ZlcmxheSxcclxuICAgIGFsbElucHV0LFxyXG4gICAgcG9wdXBBZGRDYXJkLFxyXG4gICAgYnV0dG9uQ2xvc2UsXHJcbiAgICBidXR0b25MaWtlLFxyXG4gICAgYnV0dG9uUmVjeWNsZSxcclxuICAgIGNhcmRUZW1wbGF0ZSxcclxuICAgIHByb3B1cERlbGV0ZUNvZmlybWF0aW9uLFxyXG4gICAgcG9wdXBFZGl0QXZhdGFyLFxyXG4gICAgYnV0dG9uRWRpdEF2YXRhcixcclxuICAgIGF2YXRhclBob3RvLFxyXG59O1xyXG4iLCJpbXBvcnQgXCIuL3N0eWxlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IHsgcmVzZXRGb3JtcyB9IGZyb20gXCIuL3V0aWxzL3V0aWxzLmpzXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoQ29uZmlybWF0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzXCI7XHJcbmltcG9ydCB7IGFwaSB9IGZyb20gXCIuL2NvbXBvbmVudHMvQXBpcy5qc1wiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHBvcHVwSW1hZ2UsXHJcbiAgICBhbGxGb3JtcyxcclxuICAgIGNhcmRUZW1wbGF0ZSxcclxuICAgIGJ1dHRvbkFkZENhcmQsXHJcbiAgICBidXR0b25FZGlkUHJvZmlsZSxcclxuICAgIHBvcHVwUHJvZmlsZSxcclxuICAgIHBvcHVwQWRkQ2FyZCxcclxuICAgIHByb3B1cERlbGV0ZUNvZmlybWF0aW9uLFxyXG4gICAgcG9wdXBFZGl0QXZhdGFyLFxyXG4gICAgYnV0dG9uRWRpdEF2YXRhcixcclxuICAgIGJ1dHRvblJlY3ljbGUsXHJcbiAgICBhdmF0YXJQaG90byxcclxufSBmcm9tIFwiLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBhc3luYyAoKSA9PiB7XHJcblxyXG4gICAgLy9WYXJpYWJsZSBkb25kZSBndWFyZGFtb3MgZWwgcmVzdWx0YWRvIGRlIHVuYSBwZXRpY2nDs24gZG9uZGUgb3B0ZW5lbW9zIGxvcyBkYXRvcyBkZWwgdXN1YXJpby5cclxuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gYXdhaXQgYXBpLmdldFVzZXJJbmZvKCk7XHJcblxyXG5cclxuICAgIC8vSW5zdGFuY2lhIGRlIGxhIGNsYXNlIFBvcHVwV2l0aEltYWdlIGxhIGN1YWwgbm9zIHNpcnZlIHBhcmEgbW9zdHJhciB1bmEgaW1hZ2VuIHNlbGVjY2lvbmFkYSBlbiB1bmEgdmVudGFuYSBlbWVyZ2VudGVcclxuICAgIGNvbnN0IHBvcHV0SW1hZ2VuID0gbmV3IFBvcHVwV2l0aEltYWdlKHBvcHVwSW1hZ2UpO1xyXG4gICAgcG9wdXRJbWFnZW4uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICAvL0Z1bmNpw7NuIHBhcmEgbW9zdHJhciBsYSBpbWFnZW4gc2VsZWNjaW9uYWRhIGVuIGxhIHZlbnRhbiBlbWVyZ2VudGUgdXRpbGl6YW5kbyBsYSBpbnN0YW5jaWEgcG9wdXBJbWFnZW5cclxuICAgIGNvbnN0IGhhbmRsZUNhcmRDbGljayA9IChkYXRhKSA9PiB7IHBvcHV0SW1hZ2VuLm9wZW4oZGF0YS5saW5rLCBkYXRhLm5hbWUpIH07XHJcblxyXG5cclxuICAgIC8vRnVuY2nDs24gcGFyYSBjcmVhciB1bmEgbnVldmEgdGFyamV0YSBjb24gdG9kYXMgbGFzIGZ1bmNpb25lcyBkZSBzaG93LCBib3JyYXIsIGxpa2UsIGRpc2xpa2UgZGUgbG9zIGRhdG9zIG9idGVuaWRvcyBkZWwgc2Vydmlkb3JcclxuICAgIGNvbnN0IGNyZWF0ZUNhcmRzID0gKGRhdGEpID0+IHtcclxuICAgICAgICBjb25zdCBjYXJkc0ludGFuY2UgPSBuZXcgQ2FyZCh7XHJcbiAgICAgICAgICAgIGRhdGEsIGhhbmRsZUNhcmRDbGljayxcclxuICAgICAgICAgICAgaGFuZGxlRGVsZXRlQ2xpY2s6IChjYXJFbGVtZW50LCBjYWxsYmFjaykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcG9wdXBGb3JtRGVsZXRlZENvbmZpcm1hdGlvbi5vcGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhcGkuZGVsZXRlQ2FyZChjYXJFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBGb3JtRGVsZXRlZENvbmZpcm1hdGlvbi5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhbmRsZUFkZExpa2U6IChjYXJkSWQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcGkubGlua0NhcmQoY2FyZElkKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYW5kbGVSZW1vdmVMaWtlOiBjYXJkSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5kZWxldGVDYXJkTGluayhjYXJkSWQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgICAgICBjYXJkVGVtcGxhdGUsIGN1cnJlbnRVc2VyXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gY2FyZHNJbnRhbmNlLmNyZWF0ZU5ld0NhcmQoKTtcclxuICAgIH07XHJcblxyXG4gICAgYXBpLmdldEluaXRpYWxDYXJkKCkudGhlbigoaW5pdGlhbENhcmRzKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IG15U2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpdGVtczogaW5pdGlhbENhcmRzLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNhcmRzKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJy5jYXJkcydcclxuICAgICAgICApO1xyXG4gICAgICAgIG15U2VjdGlvbi5yZW5kZXJlcigpO1xyXG4gICAgfSkuY2F0Y2goZXJyb3IgPT4geyBjb25zb2xlLmxvZyhlcnJvcikgfSk7XHJcblxyXG5cclxuICAgIC8vSW5zdGFuY2lhIGRlIGxhIGNsYXNlIFVzZXJJbmZvIGRvbmRlIGxlIHBhc2Ftb3MgbGFzIGV0aXF1ZXRhcyBwYXJhIHF1ZSBsYSBjbGFzZSBzZWxlY2Npb25lIGRvbmRlIHZhbiBhIGlyIGxvcyBub21icmUgcG9yIGRlZmVjdG8geSBsb3MgcXVlIGFjdHVhbGljZW1vc1xyXG4gICAgY29uc3QgdXNlckRhdGEgPSBuZXcgVXNlckluZm8oeyBuYW1lU2VsZWN0b3I6IFwiLmJ1dHRvbnNfX25hbWVcIiwgam9iU2VsZWN0b3I6IFwiLmJ1dHRvbnNfX2V4cGxvcmVyXCIsIGF2YXRhclNlbGVjdG9yOiBcIi5idXR0b25zX19pbWFnZVwiIH0pO1xyXG5cclxuICAgIHVzZXJEYXRhLnNldFVzZXJJbmZvKHsgbmFtZTogY3VycmVudFVzZXIubmFtZSwgam9iOiBjdXJyZW50VXNlci5hYm91dCwgYXZhdGFyOiBjdXJyZW50VXNlci5hdmF0YXIgfSk7IC8vQW50dWFsaXphIGxvcyBkYXRvcyBkZSB1c3VhcmlvIGFsIGNhcmdhciBsYSBww6FnaW5hLCBub21icmUsIGFjdGl2aWRhZCwgYXZhdGFyLlxyXG5cclxuXHJcblxyXG4gICAgLy9JbnN0YW5jaWFtb3MgbGEgY2xhc2UgUG9wdXBXaXRoRm9ybSBwYXJhIGVkaXRhciBsb3MgZGF0b3MgcGVyZmlsIGRlbCB1c3VhcmlvXHJcbiAgICBjb25zdCBwb3B1cEZvcm1FZGl0UHJvZmlsZSA9IG5ldyBQb3B1cFdpdGhGb3JtKHBvcHVwUHJvZmlsZSwgKGZvcm1EYXRhKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFwaS51cGRhdGVVc2VyKGZvcm1EYXRhLm5hbWUsIGZvcm1EYXRhLmFjdGl2aXR5KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB1c2VyRGF0YS5zZXRVc2VySW5mbyh7IG5hbWU6IGZvcm1EYXRhLm5hbWUsIGpvYjogZm9ybURhdGEuYWN0aXZpdHksIGF2YXRhcjogY3VycmVudFVzZXIuYXZhdGFyIH0pO1xyXG4gICAgICAgICAgICAgICAgcG9wdXBGb3JtRWRpdFByb2ZpbGUuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0Rm9ybXMoYWxsRm9ybXMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHsgY29uc29sZS5sb2coZXJyKSB9KVxyXG4gICAgfSk7XHJcbiAgICBwb3B1cEZvcm1FZGl0UHJvZmlsZS5zZXRFdmVudExpc3RlbmVycygpOyAvL0VqZWN1dGEgdG9kb3MgbG9zIG3DqXRvZG9zIGRlIGVzdGEgaW5zdGFuY2lhIHkgdGVubG9zIGxpc3RvcyBwYXJhIHVzYXJsb3NcclxuXHJcbiAgICAvL0PDs2RpZ28gcGFyYSBicmlyIGVsIHBvcHVwIGRlIGVkaXRhciBwZXJmaWxcclxuICAgIGJ1dHRvbkVkaWRQcm9maWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7IHBvcHVwRm9ybUVkaXRQcm9maWxlLm9wZW4oKSB9KTtcclxuXHJcbiAgICAvL0luc3RhbmNpYSBkZSBwb3B1cFdpdGhGb3JtIHBhcmEgbWFuZWphciBlbCBmb3JtdWxhcmlvIGRlIGHDsWFkaXIgbGEgdGFyamV0YVxyXG4gICAgY29uc3QgcG9wdXBGb3JtQ29udGVudEFkZENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cEFkZENhcmQsIChmb3JtRGF0YSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBhcGkuYWRkQ2FyZChmb3JtRGF0YS5uZXdwbGFjZSwgZm9ybURhdGEuZW5sYWNlKVxyXG4gICAgICAgICAgICAudGhlbihjYXJkID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkcyhjYXJkKVxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc1wiKS5wcmVwZW5kKG5ld0NhcmQpO1xyXG4gICAgICAgICAgICAgICAgcG9wdXBGb3JtQ29udGVudEFkZENhcmQuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0Rm9ybXMoYWxsRm9ybXMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHsgY29uc29sZS5sb2coZXJyKSB9KVxyXG4gICAgfSk7XHJcbiAgICBwb3B1cEZvcm1Db250ZW50QWRkQ2FyZC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIC8vQ29kaWdvIHBhcmEgYWJyaWwgZWwgZm9ybXVsYXJpbyBkZSBhw7FhZGlyIHRhcmpldGEgZGFuZG8gY2xpY2sgZW4gdW4gYm90b24gZGUgYWJyaXIgZWwgcG9wdXBcclxuICAgIGJ1dHRvbkFkZENhcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHsgcG9wdXBGb3JtQ29udGVudEFkZENhcmQub3BlbigpIH0pO1xyXG5cclxuXHJcbiAgICAvL0ludGFuY2lhIGRlIFBvcHVwV2hpdEZvcm0gcGFyYSBwb2RlciBjYXJnYXIgbGEgZm90byBkZWwgYXZhdGFyIHBvciBkZWZlY3RvIGRlIGxvcyBkYXRvcyBvYnRlbmlkb3MgZGVsIHNlcnZpZG9yXHJcbiAgICBjb25zdCBwb3B1cEZvcm1FZGl0QXZhdGFyID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBFZGl0QXZhdGFyLCAoZm9ybURhdGEpID0+IHtcclxuICAgICAgICByZXR1cm4gYXBpLnVwZGF0ZVVzZXJQaG90byhmb3JtRGF0YS5hdmF0YXIpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcCAmJiByZXNwLmF2YXRhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGF2YXRhclBob3RvLnNyYyA9IHJlc3AuYXZhdGFyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxhIHJlc3B1ZXRhIGEgbGEgQVBJLCBubyBjb250aW5lIGxhIHByb3BpZWRhZCBhdmF0YXJcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGFsIGFjdHVhbGl6YXIgbGEgZm90byBkZSBwZXJmaWxcIiwgZXJyKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfSk7XHJcbiAgICBwb3B1cEZvcm1FZGl0QXZhdGFyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5cclxuICAgIC8vQ29kaWdvIHBhcmEgYWJyaXIgZWwgUG9wdXAgZGVsIGZvcm11bGFyaW8gcGFyYSBlZGl0YXIgbGEgZm90byBkZWwgcGVyZmlsIGRlIHVzdWFyaW9cclxuICAgIGJ1dHRvbkVkaXRBdmF0YXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHsgcG9wdXBGb3JtRWRpdEF2YXRhci5vcGVuKCkgfSk7XHJcblxyXG5cclxuICAgIC8vSW5zdGFuY2lhIGRlIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBwYXJhIG1hbmVqYXIgZWwgZm9ybXVhcmlvIGRlIGNvbmZpcm1hciBzaSBkZXNlYXMgYm9ycmFyIHVuYSB0YXJqZXRhIHR1eWEgZW4gZWwgc2VydmljaW8uXHJcbiAgICBjb25zdCBwb3B1cEZvcm1EZWxldGVkQ29uZmlybWF0aW9uID0gbmV3IFBvcHVwV2l0aENvbmZpcm1hdGlvbihwcm9wdXBEZWxldGVDb2Zpcm1hdGlvbik7XHJcbiAgICBwb3B1cEZvcm1EZWxldGVkQ29uZmlybWF0aW9uLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICBidXR0b25SZWN5Y2xlLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3B1cEZvcm1EZWxldGVkQ29uZmlybWF0aW9uLm9wZW4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pXHJcblxyXG5cclxuXHJcbiAgICAvL1ZhbGlkYWNpw7NuIGRlbCBmb3JtdWxhcmlvXHJcbiAgICBjb25zdCBWYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IoYWxsRm9ybXMpO1xyXG4gICAgVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG59KVxyXG4iXSwibmFtZXMiOlsicmVzZXRGb3JtcyIsImZvcm1zIiwiZm9yRWFjaCIsImZvcm0iLCJyZXNldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b24iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImFkZCIsIkNhcmQiLCJfcmVmIiwiY2FyZFNlbGVjdG9yIiwidXNlciIsImRhdGEiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsImhhbmRsZUFkZExpa2UiLCJoYW5kbGVSZW1vdmVMaWtlIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9saW5rIiwibGluayIsIl9uYW1lIiwibmFtZSIsIl9pZCIsIl9vd25lciIsIm93bmVyIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfbGlrZXNBcnJheSIsImxpa2VzIiwiX3VzZXIiLCJfaGFuZGxlQWRkTGlrZSIsIl9oYW5kbGVEZWxldGVDbGljayIsIl9oYW5kbGVSZW1vdmVMaWtlIiwia2V5IiwidmFsdWUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX3RoaXMiLCJzb21lIiwibGlrZSIsImxpa2VCdXR0b24iLCJfZWxlbWVudCIsImxpa2VDb3VudCIsIl9pc0xpa2VkIiwicmVtb3ZlIiwidGV4dENvbnRlbnQiLCJsZW5ndGgiLCJfdGhpczIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJjb3VudExpa2UiLCJ0aGVuIiwiY2FyZFVwZGF0ZWQiLCJfdGhpczMiLCJfdGhpczQiLCJfdGhpczUiLCJfaGFuZGxlTGlrZUFuZERpc2xpa2UiLCJfaGFuZGxlUmVtb3ZlIiwiX3Nob3dDYXJkIiwiX2ltYWdlbkVsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJzcmMiLCJhbHQiLCJfaXNVc2VyT3duZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJfdXBkYXRlTGlrZVN0YXR1cyIsIl9zZXRFdmVudExpc3RlbmVycyIsIkZvcm1WYWxpZGF0b3IiLCJhbGxGb3JtcyIsIl9kZWZpbmVQcm9wZXJ0eSIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJpbnB1dExpc3QiLCJidXR0b25FbGVtZW50IiwiX2hhc0ludmFsaWRJbnB1dCIsIl9hbGxGb3JtcyIsImZvcm1FbGVtZW50IiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJBcnJheSIsImZyb20iLCJmaWVsZHNldCIsImVuYWJsZVZhbGlkYXRpb24iLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiY2xvc2UiLCJfcG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwiX2J1dHRvblBvcHVwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsb3NlQnV0dG9uIiwiYWxsT3ZlcmxheSIsIm92ZXJsYXkiLCJQb3B1cFdpdGhGb3JtIiwiX1BvcHVwIiwic3VibWlDYWxsYmFjayIsIl9jYWxsU3VwZXIiLCJfc3VibWl0QnV0dG9uIiwiX2Zvcm0iLCJfc3VibWl0QnV0dG9ucyIsIl9pbml0aWFsU3VibWl0QnV0dG9uVGV4dCIsIl9pbmhlcml0cyIsInZhbHVlc0ltcHV0IiwiaXRlbSIsIl9nZXQiLCJfZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJjYWxsIiwiZm9ybURhdGEiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJmaW5hbGx5IiwiX2Nsb3NlQnV0b25TZWxlY3RvciIsIlBvcHVwV2l0aEltYWdlIiwicG9wdXBFbGVtZW50IiwiX2ltYWdlIiwiX2Rlc2NyaXB0aW9uIiwiYWxlcnQiLCJTZWN0aW9uIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJpbm5lckhUTUwiLCJlbGVtZW50IiwiYXBwZW5kIiwiY2xlYXIiLCJjYXJkIiwiYWRkSXRlbSIsIlVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJhdmF0YXJTZWxlY3RvciIsIl9uYW1lRWxlbWVudCIsIl9qb2JFbGVtZW50IiwiX2F2YXRhckVsZW1lbnQiLCJqb2IiLCJhdmF0YXIiLCJfcmVmMiIsIlBvcHVwV2l0aENvbmZpcm1hdGlvbnMiLCJzdWJtaXRDYWxsYmFjayIsImFwaSIsIkFwaSIsInVybCIsInRva2VuIiwiX3VybCIsIl90b2tlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJjb25jYXQiLCJzdGF0dXMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJnZXRIZWFkZXJzIiwiX2dldENoZWNrUmVzcG9uc2UiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJhYm91dCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY2FyZElkIiwiYnV0dG9uRWRpZFByb2ZpbGUiLCJidXR0b25BZGRDYXJkIiwiYnV0dG9uUmVjeWNsZSIsImJ1dHRvbkVkaXRBdmF0YXIiLCJhdmF0YXJQaG90byIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJlIiwidCIsInIiLCJPYmplY3QiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZXR1cm4iLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsImluZm8iLCJlcnJvciIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZm4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwidW5kZWZpbmVkIiwiX2NhbGxlZSIsImN1cnJlbnRVc2VyIiwicG9wdXRJbWFnZW4iLCJjcmVhdGVDYXJkcyIsInVzZXJEYXRhIiwicG9wdXBGb3JtRWRpdFByb2ZpbGUiLCJwb3B1cEZvcm1Db250ZW50QWRkQ2FyZCIsInBvcHVwRm9ybUVkaXRBdmF0YXIiLCJwb3B1cEZvcm1EZWxldGVkQ29uZmlybWF0aW9uIiwiX2NvbnRleHQiLCJnZXRVc2VySW5mbyIsInNldEV2ZW50TGlzdGVuZXJzIiwib3BlbiIsImNhckVsZW1lbnQiLCJjYWxsYmFjayIsImRlbGV0ZUNhcmQiLCJsaW5rQ2FyZCIsImRlbGV0ZUNhcmRMaW5rIiwiY3JlYXRlTmV3Q2FyZCIsImdldEluaXRpYWxDYXJkIiwiaW5pdGlhbENhcmRzIiwic2V0VXNlckluZm8iLCJ1cGRhdGVVc2VyIiwiYWN0aXZpdHkiLCJhZGRDYXJkIiwibmV3cGxhY2UiLCJlbmxhY2UiLCJuZXdDYXJkIiwicHJlcGVuZCIsInVwZGF0ZVVzZXJQaG90byIsInJlc3AiLCJQb3B1cFdpdGhDb25maXJtYXRpb24iXSwic291cmNlUm9vdCI6IiJ9