/*! For license information please see main.js.LICENSE.txt */
!function(){"use strict";function e(e){e.forEach((function(e){e.reset(),e.querySelector(".form__submit").classList.add("button_inactive")}))}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,r(o.key),o)}}function r(e){var n=function(e,n){if("object"!=t(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!=t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==t(n)?n:n+""}var o=function(){return e=function e(t,n,r){var o=t.data,i=t.handleCardClick,c=t.handleDeleteClick,a=t.handleAddLike,u=t.handleRemoveLike;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._link=o.link,this._name=o.name,this._id=o._id,this._owner=o.owner,this._cardSelector=n,this._handleCardClick=i,this._likesArray=o.likes||{},this._user=r,this._handleAddLike=a,this._handleDeleteClick=c,this._handleRemoveLike=u},(t=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".cards__element").cloneNode("true")}},{key:"_isLiked",value:function(){var e=this;return this._likesArray.some((function(t){return t._id===e._user._id}))}},{key:"_isUserOwner",value:function(){return this._user._id===this._owner._id}},{key:"_updateLikeStatus",value:function(){var e=this._element.querySelector(".cards__element_itemImage"),t=this._element.querySelector(".countlike");this._isLiked()?e.classList.add("cards__like_active"):e.classList.remove("cards__like_active"),t.textContent=this._likesArray.length}},{key:"_handleLikeAndDislike",value:function(){var e=this;this._element.querySelector(".cards__element_itemImage").addEventListener("click",(function(t){var n=t.target,r=e._element.querySelector(".countlike");e._isLiked()?e._handleRemoveLike(e._id).then((function(t){e._likesArray=t.likes,n.classList.remove("cards__like_active"),r.textContent=e._likesArray.length})):e._handleAddLike(e._id).then((function(t){e._likesArray=t.likes,n.classList.add("cards__like_active"),r.textContent=e._likesArray.length}))}))}},{key:"_handleRemove",value:function(){var e=this;this._element.querySelector(".cards__element_trast").addEventListener("click",(function(){e._handleDeleteClick(e._id,(function(){e._element.remove()}))}))}},{key:"_showCard",value:function(){var e=this;this._element.querySelector(".cards__element_image").addEventListener("click",(function(){e._handleCardClick({link:e._link,name:e._name})}))}},{key:"_setEventListeners",value:function(){var e=this;this._handleLikeAndDislike(),this._handleRemove(),this._showCard(),this._imagenElement.addEventListener("click",(function(){e._handleCardClick({link:e._link,name:e._name})}))}},{key:"createNewCard",value:function(){return this._element=this._getTemplate(),this._element.querySelector(".cards__element_itemTitle").textContent=this._name,this._imagenElement=this._element.querySelector(".cards__element_image"),this._imagenElement.src=this._link,this._imagenElement.alt=this._name,this._isUserOwner()||(this._element.querySelector(".cards__element_trast").style.display="none"),this._updateLikeStatus(),this._setEventListeners(),this._element}}])&&n(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,u(r.key),r)}}function a(e,t,n){return(t=u(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e){var t=function(e,t){if("object"!=i(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==i(t)?t:t+""}var l=function(){return e=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"_showInputError",(function(e,t){var n=e.parentElement.querySelector(".form__error");e.classList.add("form__input_type_error"),n.textContent=t,n.classList.add("form__input-error_active")})),a(this,"_hideInputError",(function(e){var t=e.parentElement.querySelector(".form__error");e.classList.remove("form__input_type_error"),t.classList.remove("form__input-error_active"),t.textContent=""})),a(this,"_checkInputValidity",(function(e){e.validity.valid?n._hideInputError(e):n._showInputError(e,e.validationMessage)})),a(this,"_hasInvalidInput",(function(e){return e.some((function(e){return!e.validity.valid}))})),a(this,"_toggleButtonState",(function(e,t){n._hasInvalidInput(e)?t.classList.add("button_inactive"):t.classList.remove("button_inactive")})),a(this,"enableValidation",(function(){n._allForms.forEach((function(e){e.addEventListener("submit",(function(e){e.preventDefault()})),Array.from(document.forms).forEach((function(e){n._setEventListeners(e)}))}))})),this._allForms=t,this.enableValidation()},(t=[{key:"_setEventListeners",value:function(e){var t=this,n=Array.from(e.querySelectorAll(".form__input")),r=e.querySelector(".form__submit");n.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState(n,r)}))}))}}])&&c(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}(),s=l;function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,y(r.key),r)}}function y(e){var t=function(e,t){if("object"!=f(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==f(t)?t:t+""}var h=function(){return e=function e(t){var n,r,o,i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=this,o=function(e){"Escape"===e.key&&i.close()},(r=y(r="_handleEscClose"))in n?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,this._popupSelector=t,this._popupElement=document.querySelector(this._popupSelector),this._handleEscClose=this._handleEscClose.bind(this),this._buttonPopup=this._popupElement.querySelector(".form__submit")},(t=[{key:"open",value:function(){this._popupElement.classList.add("popup_show"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_show"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this,t=this._popupElement.querySelector(".popup__close-button"),n=this._popupElement.querySelectorAll(".popup__overlay");t.addEventListener("click",(function(){e.close()})),n.forEach((function(t){t.addEventListener("click",(function(){e.close()}))})),document.addEventListener("keydown",this._handleEscClose)}}])&&p(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,v(r.key),r)}}function v(e){var t=function(e,t){if("object"!=d(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=d(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==d(t)?t:t+""}function _(e,t,n){return t=w(t),function(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,b()?Reflect.construct(t,n||[],w(e).constructor):t.apply(e,n))}function b(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(b=function(){return!!e})()}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}function k(e,t){return k=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},k(e,t)}var E=function(e){function t(e,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=_(this,t,[e]))._submitButton=n,r._form=document.querySelector(e).querySelector(".form"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&k(e,t)}(t,e),n=t,(r=[{key:"_getInputValues",value:function(){var e={};return this._form.querySelectorAll(".form__input").forEach((function(t){t.name&&(e[t.name]=t.value)})),e}},{key:"close",value:function(){this._form.reset(),g(w(t.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;g(w(t.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault();var n=e._getInputValues();e._submitButton(n),e.close()}));var n=this._form.querySelector(this._closeButonSelector);n&&n.addEventListener("click",(function(t){t.preventDefault(),e.close()}))}}])&&m(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(h);function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,j(r.key),r)}}function j(e){var t=function(e,t){if("object"!=S(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=S(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==S(t)?t:t+""}function O(e,t,n){return t=q(t),function(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,P()?Reflect.construct(t,n||[],q(e).constructor):t.apply(e,n))}function P(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(P=function(){return!!e})()}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},C.apply(this,arguments)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}function x(e,t){return x=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},x(e,t)}var T=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),O(this,t,[e])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&x(e,t)}(t,e),n=t,(r=[{key:"open",value:function(e,n){var r=document.querySelector(this._popupSelector);this._image=r.querySelector("#popup__image"),this._description=r.querySelector(".popup__title"),this._image&&this._description?(this._image.src=e,this._image.alt=n,this._description.textContent=n,C(q(t.prototype),"open",this).call(this)):alert("Elemento de imagen o descripcion no encontradas")}}])&&L(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(h);function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,I(r.key),r)}}function I(e){var t=function(e,t){if("object"!=R(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=R(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==R(t)?t:t+""}var D=function(){return e=function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)},(t=[{key:"clear",value:function(){this._container.innerHTML=""}},{key:"addItem",value:function(e){this._container.append(e)}},{key:"renderer",value:function(){var e=this;this.clear(),this._items.forEach((function(t){var n=e._renderer(t);e.addItem(n)}))}}])&&A(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,H(r.key),r)}}function H(e){var t=function(e,t){if("object"!=N(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=N(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==N(t)?t:t+""}var B=function(){return e=function e(t){var n=t.nameSelector,r=t.jobSelector,o=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=document.querySelector(n),this._jobElement=document.querySelector(r),this._avatarElement=document.querySelector(o)},(t=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job,r=e.avatar;this._nameElement.textContent=t,this._jobElement.textContent=n,this._avatarElement.src=r}}])&&U(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function G(e){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,F(r.key),r)}}function F(e){var t=function(e,t){if("object"!=G(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=G(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==G(t)?t:t+""}function J(e,t,n){return t=Y(t),function(e,t){if(t&&("object"===G(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,M()?Reflect.construct(t,n||[],Y(e).constructor):t.apply(e,n))}function M(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(M=function(){return!!e})()}function z(){return z="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},z.apply(this,arguments)}function Y(e){return Y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Y(e)}function K(e,t){return K=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},K(e,t)}var Q=function(e){function t(e,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=J(this,t,[e])).submitCallback=n,r._form=document.querySelector(e).querySelector(".form"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&K(e,t)}(t,e),n=t,(r=[{key:"open",value:function(e){z(Y(t.prototype),"open",this).call(this),this.submitCallback=e}},{key:"_getInputValues",value:function(){var e={};return this._form.querySelectorAll(".form__input").forEach((function(t){t.name&&(e[t.name]=t.value)})),e}},{key:"close",value:function(){this._form.reset(),z(Y(t.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;z(Y(t.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e.submitCallback()})),this._form.querySelector(".form__submit_cancel").addEventListener("click",(function(){e.close()}))}}])&&V(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r}(h);function W(e){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},W(e)}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Z(r.key),r)}}function Z(e){var t=function(e,t){if("object"!=W(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=W(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==W(t)?t:t+""}var $=new(function(){return e=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t,this._token=n},(t=[{key:"getHeaders",value:function(){return{Authorization:this._token,"Content-Type":"application/json"}}},{key:"_getCheckResponse",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(e){console.log("Error:",e)}))}},{key:"getInitialCard",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(e){console.log("Error:",e)}))}},{key:"updateUser",value:function(e,t){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this.getHeaders(),body:JSON.stringify({name:e,about:t})}).then(this._getCheckResponse).catch((function(e){console.log("Error: ",e)}))}},{key:"updateUserPhoto",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this.getHeaders(),body:JSON.stringify({avatar:e})}).then(this._getCheckResponse).then((function(e){return console.log("Respuesta de API; ",e),e}))}},{key:"addCard",value:function(e,t){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this.getHeaders(),body:JSON.stringify({name:e,link:t})}).then(this._getCheckResponse).catch((function(e){console.log("Error: ",e)}))}},{key:"linkCard",value:function(e){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"PUT",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(e){console.log("Error: ",e)}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(e){console.log("Error: ",e)}))}},{key:"deleteCardLink",value:function(e){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"DELETE",headers:this.getHeaders()}).then(this._getCheckResponse).catch((function(e){console.log("Error: ",e)}))}}])&&X(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}())("https://around.nomoreparties.co/v1/web_es_11","678fbd92-e6e4-4044-b047-74ce334ffd4e"),ee=document.querySelectorAll(".form"),te=(document.querySelector(".popup"),document.querySelector(".buttons__item_index_profile")),ne=document.querySelector(".buttons__item_index_add-card"),re=(document.querySelectorAll(".popup__overlay"),document.querySelectorAll(".form__error"),document.querySelector(".popup__close-button"),document.querySelector(".cards__element_item-imagen"),document.querySelectorAll(".cards__element_trast")),oe=document.querySelector(".buttons__edit"),ie=document.querySelector(".buttons__image");function ce(e){return ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ce(e)}function ae(){ae=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var i=t&&t.prototype instanceof v?t:v,c=Object.create(i.prototype),a=new q(r||[]);return o(c,"_invoke",{value:j(e,n,a)}),c}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var p="suspendedStart",y="suspendedYield",h="executing",d="completed",m={};function v(){}function _(){}function b(){}var g={};l(g,c,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(x([])));k&&k!==n&&r.call(k,c)&&(g=k);var E=b.prototype=v.prototype=Object.create(g);function S(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function L(e,t){function n(o,i,c,a){var u=f(e[o],e,i);if("throw"!==u.type){var l=u.arg,s=l.value;return s&&"object"==ce(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,c,a)}),(function(e){n("throw",e,c,a)})):t.resolve(s).then((function(e){l.value=e,c(l)}),(function(e){return n("throw",e,c,a)}))}a(u.arg)}var i;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return i=i?i.then(o,o):o()}})}function j(t,n,r){var o=p;return function(i,c){if(o===h)throw Error("Generator is already running");if(o===d){if("throw"===i)throw c;return{value:e,done:!0}}for(r.method=i,r.arg=c;;){var a=r.delegate;if(a){var u=O(a,r);if(u){if(u===m)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var l=f(t,n,r);if("normal"===l.type){if(o=r.done?d:y,l.arg===m)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(o=d,r.method="throw",r.arg=l.arg)}}}function O(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,O(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=f(o,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var c=i.arg;return c?c.done?(n[t.resultName]=c.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):c:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function q(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function x(t){if(t||""===t){var n=t[c];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}throw new TypeError(ce(t)+" is not iterable")}return _.prototype=b,o(E,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:_,configurable:!0}),_.displayName=l(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,l(e,u,"GeneratorFunction")),e.prototype=Object.create(E),e},t.awrap=function(e){return{__await:e}},S(L.prototype),l(L.prototype,a,(function(){return this})),t.AsyncIterator=L,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var c=new L(s(e,n,r,o),i);return t.isGeneratorFunction(n)?c:c.next().then((function(e){return e.done?e.value:c.next()}))},S(E),l(E,u,"Generator"),l(E,c,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=x,q.prototype={constructor:q,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return a.type="throw",a.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var u=r.call(c,"catchLoc"),l=r.call(c,"finallyLoc");if(u&&l){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!l)throw Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=e,c.arg=t,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(c)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:x(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function ue(e,t,n,r,o,i,c){try{var a=e[i](c),u=a.value}catch(e){return void n(e)}a.done?t(u):Promise.resolve(u).then(r,o)}function le(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function c(e){ue(i,r,o,c,a,"next",e)}function a(e){ue(i,r,o,c,a,"throw",e)}c(void 0)}))}}document.addEventListener("DOMContentLoaded",le(ae().mark((function t(){var n,r,i,c,a,u,l,f,p;return ae().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,$.getUserInfo();case 2:n=t.sent,(r=new T(".popup_content-image")).setEventListeners(),i=function(e){r.open(e.link,e.name)},c=function(e){return new o({data:e,handleCardClick:i,handleDeleteClick:function(e,t){p.open((function(){$.deleteCard(e).then((function(){t(),p.close()})).catch((function(e){console.error(e)}))}))},handleAddLike:function(e){return $.linkCard(e)},handleRemoveLike:function(e){return $.deleteCardLink(e)}},"#newElement",n).createNewCard()},$.getInitialCard().then((function(e){new D({items:e,renderer:function(e){return c(e)}},".cards").renderer()})).catch((function(e){console.log(e)})),(a=new B({nameSelector:".buttons__name",jobSelector:".buttons__explorer",avatarSelector:".buttons__image"})).setUserInfo({name:n.name,job:n.about,avatar:n.avatar}),(u=new E(".popup_edit-profile",(function(t){$.updateUser(t.name,t.activity).then((function(){a.setUserInfo({name:t.name,job:t.activity,avatar:n.avatar}),u.close(),e(ee)})).catch((function(e){console.log(e)}))}))).setEventListeners(),te.addEventListener("click",(function(){u.open()})),(l=new E(".popup_content-addcard",(function(t){$.addCard(t.newplace,t.enlace).then((function(t){var n=c(t);document.querySelector(".cards").prepend(n),l.close(),e(ee)})).catch((function(e){console.log(e)}))}))).setEventListeners(),ne.addEventListener("click",(function(){l.open()})),(f=new E(".popup_avatar",(function(e){return $.updateUserPhoto(e.avatar).then((function(e){e&&e.avatar?ie.src=e.avatar:console.log("La respueta a la API, no contine la propiedad avatar")})).catch((function(e){console.log("Error al actualizar la foto de perfil",e)}))}))).setEventListeners(),oe.addEventListener("click",(function(){f.open()})),(p=new Q(".popup_delete-card")).setEventListeners(),re.forEach((function(e){e.addEventListener("click",(function(){p.open()}))})),new s(ee).enableValidation();case 24:case"end":return t.stop()}}),t)}))))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,